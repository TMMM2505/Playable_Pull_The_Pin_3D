["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _TintColor;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0 * _TintColor;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _TintColor;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0 * _TintColor;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TintColor;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0 * _TintColor;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TintColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0 * _TintColor;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 * vs_COLOR0;\n    u_xlat0 = u_xlat0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat0 = u_xlat0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_7;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_7 = max(u_xlat16_7, 0.0);\n    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump float u_xlat16_7;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_7 = max(u_xlat16_7, 0.0);\n    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_0 = max(u_xlat16_0, 0.0);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = u_xlat1.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_0 = max(u_xlat16_0, 0.0);\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = u_xlat1.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _RampThreshold;\nuniform \tfloat _RampSmooth;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Shininess;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat6;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);\n    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat1.x = (-u_xlat1.x) + u_xlat11;\n    u_xlat1.x = float(1.0) / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat6;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat1.x * -2.0 + 3.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat6;\n    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_15 = inversesqrt(u_xlat16_15);\n    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat1.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Shininess * 128.0;\n    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.x = dot(u_xlat1.xx, u_xlat10_0.ww);\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * vs_TEXCOORD3.xyz + u_xlat1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _RampThreshold;\nuniform \tfloat _RampSmooth;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Shininess;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat6;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = u_xlat16_15 * 0.5 + 0.5;\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat6 = u_xlat16_15 + (-u_xlat1.x);\n    u_xlat11 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat1.x = (-u_xlat1.x) + u_xlat11;\n    u_xlat1.x = float(1.0) / u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat6;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat6 = u_xlat1.x * -2.0 + 3.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat6;\n    u_xlat16_2.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_2.xyz = _SColor.www * u_xlat16_2.xyz + _HColor.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_2.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_15 = inversesqrt(u_xlat16_15);\n    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat1.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Shininess * 128.0;\n    u_xlat1.x = u_xlat1.x * u_xlat16_0.x;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_0.ww);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * vs_TEXCOORD3.xyz + u_xlat1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24 * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x = u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump float vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24 * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x = u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nin mediump float vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nin mediump vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout highp vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nin highp vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _RampThreshold;\nuniform \tfloat _RampSmooth;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nfloat u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat5;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_0.x = u_xlat16_0.x * 0.5 + 0.5;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat1 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat5 = u_xlat16_0.x + (-u_xlat1);\n    u_xlat9 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat1 = (-u_xlat1) + u_xlat9;\n    u_xlat1 = float(1.0) / u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat5;\n    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);\n    u_xlat5 = u_xlat1 * -2.0 + 3.0;\n    u_xlat1 = u_xlat1 * u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat5;\n    u_xlat16_0.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_0.xyz = _SColor.www * u_xlat16_0.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = vec3(u_xlat1) * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _RampThreshold;\nuniform \tfloat _RampSmooth;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nfloat u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat5;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_0.x = u_xlat16_0.x * 0.5 + 0.5;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat1 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat5 = u_xlat16_0.x + (-u_xlat1);\n    u_xlat9 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat1 = (-u_xlat1) + u_xlat9;\n    u_xlat1 = float(1.0) / u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat5;\n    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);\n    u_xlat5 = u_xlat1 * -2.0 + 3.0;\n    u_xlat1 = u_xlat1 * u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat5;\n    u_xlat16_0.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_0.xyz = _SColor.www * u_xlat16_0.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = vec3(u_xlat1) * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * vs_TEXCOORD3.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) / u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) / u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_12.x = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_28 = float(1.0) / u_xlat16_44;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_12.x = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_28 = float(1.0) / u_xlat16_44;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) / u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) / u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    SV_Target0.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) / u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) / u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    SV_Target0.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_12.x * 0.5 + 0.5;\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_12.z = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_12.xz = (-vec2(u_xlat16_28)) + u_xlat16_12.xz;\n    u_xlat16_28 = float(1.0) / u_xlat16_12.z;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_12.x * 0.5 + 0.5;\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_12.z = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_12.xz = (-vec2(u_xlat16_28)) + u_xlat16_12.xz;\n    u_xlat16_28 = float(1.0) / u_xlat16_12.z;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) / u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) / u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) / u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    SV_Target0.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) / u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    SV_Target0.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) / u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) / u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) / u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) / u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    u_xlat16_2.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) / u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 / u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) / u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    u_xlat16_2.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 / u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) / u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    u_xlat16_2.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 / u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) / u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    u_xlat16_2.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 / u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x / u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) / u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) / u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat10_1 * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat16_1 * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_6.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_6.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) / u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat10_1 * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat16_1 * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nlowp float u_xlat10_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x / u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_25 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat10_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x / u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_25 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat16_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nlowp float u_xlat10_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x / u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_25 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat10_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x / u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_25 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat16_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat10_1 * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat16_1 * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 / u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 / u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 / u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 / u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 / u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) / u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) / u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) / u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) / u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) / u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) / u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x / u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) / u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) / u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x / u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) / u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec2 u_xlat10_9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat9.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat10_9.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_9.y) * _GlossMapScale + 1.0;\n    u_xlat27 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat30 = u_xlat16_29 * u_xlat27 + u_xlat28;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27 + u_xlat28;\n    u_xlat28 = u_xlat28 * u_xlat28;\n    u_xlat30 = abs(u_xlat16_2.x) * u_xlat30;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat27 = u_xlat16_29 * u_xlat27 + u_xlat30;\n    u_xlat27 = u_xlat27 + 9.99999975e-06;\n    u_xlat27 = 0.5 / u_xlat27;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_20 * u_xlat28 + (-u_xlat16_20);\n    u_xlat0 = u_xlat0 * u_xlat16_20 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat28 * 0.318309873;\n    u_xlat0 = u_xlat1.x / u_xlat0;\n    u_xlat16_20 = u_xlat0 * u_xlat27;\n    u_xlat0 = u_xlat16_20 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat10_9.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat10_9.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb0 = u_xlat16_33!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat0 * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_33 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec2 u_xlat16_9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat9.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat16_9.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_9.y) * _GlossMapScale + 1.0;\n    u_xlat27 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat30 = u_xlat16_29 * u_xlat27 + u_xlat28;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27 + u_xlat28;\n    u_xlat28 = u_xlat28 * u_xlat28;\n    u_xlat30 = abs(u_xlat16_2.x) * u_xlat30;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat27 = u_xlat16_29 * u_xlat27 + u_xlat30;\n    u_xlat27 = u_xlat27 + 9.99999975e-06;\n    u_xlat27 = 0.5 / u_xlat27;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_20 * u_xlat28 + (-u_xlat16_20);\n    u_xlat0 = u_xlat0 * u_xlat16_20 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat28 * 0.318309873;\n    u_xlat0 = u_xlat1.x / u_xlat0;\n    u_xlat16_20 = u_xlat0 * u_xlat27;\n    u_xlat0 = u_xlat16_20 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat16_9.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat16_9.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb0 = u_xlat16_33!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat0 * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_33 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_20) + u_xlat16_11;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_4.x = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = (-u_xlat16_20) * u_xlat16_11 + 1.0;\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_4.x * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2);\n    u_xlat16_2 = -abs(u_xlat16_2) + 1.0;\n    u_xlat18 = u_xlat16_4.x * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat16_13.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_13.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_4.x * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_13.x) + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_13.xx, u_xlat16_13.xx);\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat9.x + -0.5;\n    u_xlat16_22 = (-u_xlat9.x) * u_xlat9.x + 1.33000004;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_31 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_31;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_13.x * u_xlat16_11 + 1.0;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_20;\n    u_xlat16_2 = u_xlat16_2 + (-_RimMin);\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_20 + 1.0;\n    u_xlat16_11 = u_xlat16_20 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_4.x * u_xlat16_11;\n    u_xlat16_4.xyw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_4.xyw = _SColor.www * u_xlat16_4.xyw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_4.xyw) + _HColor.xyz;\n    u_xlat16_4.xyw = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_4.xyw;\n    u_xlat16_4.xyw = u_xlat16_4.xyw * _LightColor0.xyz;\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * vec3(u_xlat16_11);\n    u_xlat16_4.xyw = u_xlat16_7.xyz * u_xlat16_4.xyw + u_xlat16_6.xyz;\n    u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n    u_xlat16_2 = u_xlat16_11 * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_11;\n    u_xlat16_2 = u_xlat16_2 * _RimStrength;\n    u_xlat16_2 = u_xlat16_22 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_29 * u_xlat16_2;\n    SV_Target0.xyz = vec3(u_xlat16_2) * _LightColor0.xyz + u_xlat16_4.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_20) + u_xlat16_11;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_4.x = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = (-u_xlat16_20) * u_xlat16_11 + 1.0;\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_4.x * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2);\n    u_xlat16_2 = -abs(u_xlat16_2) + 1.0;\n    u_xlat18 = u_xlat16_4.x * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat16_13.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_13.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_13.x) + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_13.xx, u_xlat16_13.xx);\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat9.x + -0.5;\n    u_xlat16_22 = (-u_xlat9.x) * u_xlat9.x + 1.33000004;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_31 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_31;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_13.x * u_xlat16_11 + 1.0;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_20;\n    u_xlat16_2 = u_xlat16_2 + (-_RimMin);\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_20 + 1.0;\n    u_xlat16_11 = u_xlat16_20 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_4.x * u_xlat16_11;\n    u_xlat16_4.xyw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_4.xyw = _SColor.www * u_xlat16_4.xyw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_4.xyw) + _HColor.xyz;\n    u_xlat16_4.xyw = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_4.xyw;\n    u_xlat16_4.xyw = u_xlat16_4.xyw * _LightColor0.xyz;\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * vec3(u_xlat16_11);\n    u_xlat16_4.xyw = u_xlat16_7.xyz * u_xlat16_4.xyw + u_xlat16_6.xyz;\n    u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n    u_xlat16_2 = u_xlat16_11 * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_11;\n    u_xlat16_2 = u_xlat16_2 * _RimStrength;\n    u_xlat16_2 = u_xlat16_22 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_29 * u_xlat16_2;\n    SV_Target0.xyz = vec3(u_xlat16_2) * _LightColor0.xyz + u_xlat16_4.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat10_2 * _Color;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat16_2 * _Color;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 / u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 / u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat10_2 * _Color;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat16_2 * _Color;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat9.x = (-u_xlat10_4.w) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_29 * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2.x) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat18 = u_xlat16_29 * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0.x;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_14.xyz = vec3(u_xlat10_1) * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_16.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb1 = u_xlat16_16.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_16.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_8.x = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_16.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_16.xyz = u_xlat0.xzw * vec3(u_xlat16_7);\n    u_xlat16_16.xyz = u_xlat16_16.xyz * _Color.www;\n    SV_Target0.xyz = u_xlat16_16.xyz * u_xlat16_2.xyz + u_xlat16_14.xyz;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_7 + u_xlat16_2.x;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat9.x = (-u_xlat16_4.w) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_29 * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2.x) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat18 = u_xlat16_29 * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0.x;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_14.xyz = vec3(u_xlat16_1) * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_16.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb1 = u_xlat16_16.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_16.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_8.x = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_16.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_16.xyz = u_xlat0.xzw * vec3(u_xlat16_7);\n    u_xlat16_16.xyz = u_xlat16_16.xyz * _Color.www;\n    SV_Target0.xyz = u_xlat16_16.xyz * u_xlat16_2.xyz + u_xlat16_14.xyz;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_7 + u_xlat16_2.x;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat8.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat24 = (-u_xlat16) * u_xlat16 + 1.0;\n    u_xlat25 = u_xlat16 * u_xlat16;\n    u_xlat27 = u_xlat16_26 * u_xlat24 + u_xlat25;\n    u_xlat24 = abs(u_xlat16_2.x) * u_xlat24 + u_xlat25;\n    u_xlat25 = u_xlat25 * u_xlat25;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat24 = u_xlat16_26 * u_xlat24 + u_xlat27;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_18 * u_xlat25 + (-u_xlat16_18);\n    u_xlat0 = u_xlat0 * u_xlat16_18 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat25 * 0.318309873;\n    u_xlat0 = u_xlat1.x / u_xlat0;\n    u_xlat16_18 = u_xlat0 * u_xlat24;\n    u_xlat0 = u_xlat16_18 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_12.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1 = u_xlat10_1 * _Color;\n    u_xlat16_12.xyz = u_xlat10_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_14.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb0 = u_xlat16_14.x!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat0 * u_xlat16_18;\n    u_xlat16_14.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16 + -0.5;\n    u_xlat16_7.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_14.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_6);\n    u_xlat16_14.xyz = u_xlat1.www * u_xlat16_14.xyz;\n    SV_Target0.xyz = u_xlat16_14.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.x = (-u_xlat16_6) + 1.0;\n    SV_Target0.w = u_xlat1.w * u_xlat16_6 + u_xlat16_2.x;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec2 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat8.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat16_8.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat16_8.y) * _GlossMapScale + 1.0;\n    u_xlat24 = (-u_xlat16) * u_xlat16 + 1.0;\n    u_xlat25 = u_xlat16 * u_xlat16;\n    u_xlat27 = u_xlat16_26 * u_xlat24 + u_xlat25;\n    u_xlat24 = abs(u_xlat16_2.x) * u_xlat24 + u_xlat25;\n    u_xlat25 = u_xlat25 * u_xlat25;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat24 = u_xlat16_26 * u_xlat24 + u_xlat27;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_18 * u_xlat25 + (-u_xlat16_18);\n    u_xlat0 = u_xlat0 * u_xlat16_18 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat25 * 0.318309873;\n    u_xlat0 = u_xlat1.x / u_xlat0;\n    u_xlat16_18 = u_xlat0 * u_xlat24;\n    u_xlat0 = u_xlat16_18 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_12.xyz = u_xlat16_1.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1 = u_xlat16_1 * _Color;\n    u_xlat16_12.xyz = u_xlat16_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6 = (-u_xlat16_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_14.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb0 = u_xlat16_14.x!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat0 * u_xlat16_18;\n    u_xlat16_14.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16 + -0.5;\n    u_xlat16_7.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_14.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_6);\n    u_xlat16_14.xyz = u_xlat1.www * u_xlat16_14.xyz;\n    SV_Target0.xyz = u_xlat16_14.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.x = (-u_xlat16_6) + 1.0;\n    SV_Target0.w = u_xlat1.w * u_xlat16_6 + u_xlat16_2.x;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_12.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_12.x = (-u_xlat16_22) + u_xlat16_12.x;\n    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_32 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_32;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_32 = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = (-u_xlat16_22) * u_xlat16_12.x + 1.0;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10.x = (-u_xlat10_4.w) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat10.x) * u_xlat10.x + 1.0;\n    u_xlat30 = u_xlat10.x * u_xlat10.x;\n    u_xlat31 = u_xlat16_32 * u_xlat20 + u_xlat30;\n    u_xlat20 = abs(u_xlat16_2.x) * u_xlat20 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat31 = u_xlat31 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat20 = u_xlat16_32 * u_xlat20 + u_xlat31;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_22 * u_xlat30 + (-u_xlat16_22);\n    u_xlat0.x = u_xlat0.x * u_xlat16_22 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat0.x = u_xlat30 / u_xlat0.x;\n    u_xlat16_22 = u_xlat0.x * u_xlat20;\n    u_xlat0.x = u_xlat16_22 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_22 = u_xlat16_32 * u_xlat0.x;\n    u_xlat16_15.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_15.xyz = vec3(u_xlat10_1) * u_xlat16_15.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.x = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * u_xlat16_7.xxx;\n    u_xlat16_37 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n    u_xlatb0 = u_xlat16_37!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_22 = u_xlat0.x * u_xlat16_22;\n    u_xlat16_8.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    u_xlat16_22 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10.x + -0.5;\n    u_xlat16_37 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_37;\n    u_xlat16_9.xyz = (-u_xlat16_15.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat16_15.xyz;\n    u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_8.xyz;\n    u_xlat16_22 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_22 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_5.x * u_xlat16_12.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_12.x;\n    u_xlat16_2.x = u_xlat16_32 * u_xlat16_2.x;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_15.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_12.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_12.x = (-u_xlat16_22) + u_xlat16_12.x;\n    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_32 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_32;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_32 = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = (-u_xlat16_22) * u_xlat16_12.x + 1.0;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10.x = (-u_xlat16_4.w) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat10.x) * u_xlat10.x + 1.0;\n    u_xlat30 = u_xlat10.x * u_xlat10.x;\n    u_xlat31 = u_xlat16_32 * u_xlat20 + u_xlat30;\n    u_xlat20 = abs(u_xlat16_2.x) * u_xlat20 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat31 = u_xlat31 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat20 = u_xlat16_32 * u_xlat20 + u_xlat31;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 / u_xlat20;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_22 * u_xlat30 + (-u_xlat16_22);\n    u_xlat0.x = u_xlat0.x * u_xlat16_22 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat0.x = u_xlat30 / u_xlat0.x;\n    u_xlat16_22 = u_xlat0.x * u_xlat20;\n    u_xlat0.x = u_xlat16_22 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_22 = u_xlat16_32 * u_xlat0.x;\n    u_xlat16_15.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_15.xyz = vec3(u_xlat16_1) * u_xlat16_15.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.x = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * u_xlat16_7.xxx;\n    u_xlat16_37 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n    u_xlatb0 = u_xlat16_37!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_22 = u_xlat0.x * u_xlat16_22;\n    u_xlat16_8.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    u_xlat16_22 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10.x + -0.5;\n    u_xlat16_37 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_37;\n    u_xlat16_9.xyz = (-u_xlat16_15.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat16_15.xyz;\n    u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_8.xyz;\n    u_xlat16_22 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_22 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_5.x * u_xlat16_12.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_12.x;\n    u_xlat16_2.x = u_xlat16_32 * u_xlat16_2.x;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_15.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) / u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) / u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9.x) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = (-u_xlat16_9.x) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_18 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9.x) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9.x) * u_xlat21;\n    u_xlat16_9.x = -abs(u_xlat16_9.x) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_27 * u_xlat12 + (-u_xlat16_27);\n    u_xlat1.x = u_xlat1.x * u_xlat16_27 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_27 = u_xlat1.x * u_xlat29;\n    u_xlat16_13.x = _SpecSmooth * 0.5;\n    u_xlat16_13.x = u_xlat16_27 * 3.14159274 + (-u_xlat16_13.x);\n    u_xlat1.x = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_13.x = float(1.0) / u_xlat10;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x + (-u_xlat1.x);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_27 = u_xlat16_18 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat10_3.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat28 + -0.5;\n    u_xlat16_33 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_27) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_27 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_4.x * u_xlat16_9.x + 1.0;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_4.x * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_9.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9.x) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = (-u_xlat16_9.x) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_18 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9.x) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9.x) * u_xlat21;\n    u_xlat16_9.x = -abs(u_xlat16_9.x) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_27 * u_xlat12 + (-u_xlat16_27);\n    u_xlat1.x = u_xlat1.x * u_xlat16_27 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 / u_xlat1.x;\n    u_xlat16_27 = u_xlat1.x * u_xlat29;\n    u_xlat16_13.x = _SpecSmooth * 0.5;\n    u_xlat16_13.x = u_xlat16_27 * 3.14159274 + (-u_xlat16_13.x);\n    u_xlat1.x = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_13.x = float(1.0) / u_xlat10;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x + (-u_xlat1.x);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_27 = u_xlat16_18 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat28 + -0.5;\n    u_xlat16_33 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_27) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_27 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_4.x * u_xlat16_9.x + 1.0;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_4.x * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_9.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nuniform \tvec4 _LightColor0;\nuniform \tfloat _SpecularInt;\nuniform \tfloat _SpecularPow;\nuniform \tfloat _Alpha;\nuniform lowp sampler2D _SpecularTex;\nuniform lowp sampler2D _PlusTex;\nuniform lowp sampler2D _TexFadePlus;\nuniform lowp sampler2D _BaseTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _SpecularPow;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat10_4.xyz = texture2D(_SpecularTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat4.xyz = u_xlat10_4.xyz * _LightColor0.xyz;\n    u_xlat4.xyz = u_xlat4.xyz * vec3(_SpecularInt);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat10_2.xyz = texture2D(_TexFadePlus, u_xlat1.xy).xyz;\n    u_xlat10_1.xyz = texture2D(_PlusTex, u_xlat1.xy).xyz;\n    u_xlatb12 = _ScaleFadePlus>=u_xlat10_1.x;\n    u_xlat13 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat10_2.xzy;\n    u_xlat1.xyz = u_xlat10_1.xzy * vec3(u_xlat12) + u_xlat2.xyz;\n    u_xlat10_2 = texture2D(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 * _ColorMulti;\n    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzy + u_xlat0.xyz;\n    u_xlat16_3 = u_xlat2.w;\n    u_xlat0.x = u_xlat16_3 * _Alpha;\n    SV_Target0.w = u_xlat0.x;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec3 in_NORMAL0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nuniform \tvec4 _LightColor0;\nuniform \tfloat _SpecularInt;\nuniform \tfloat _SpecularPow;\nuniform \tfloat _Alpha;\nUNITY_LOCATION(0) uniform mediump sampler2D _SpecularTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _PlusTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _TexFadePlus;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _SpecularPow;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat16_4.xyz = texture(_SpecularTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat4.xyz = u_xlat4.xyz * vec3(_SpecularInt);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat16_2.xyz = texture(_TexFadePlus, u_xlat1.xy).xyz;\n    u_xlat16_1.xyz = texture(_PlusTex, u_xlat1.xy).xyz;\n    u_xlatb12 = _ScaleFadePlus>=u_xlat16_1.x;\n    u_xlat13 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat16_2.xzy;\n    u_xlat1.xyz = u_xlat16_1.xzy * vec3(u_xlat12) + u_xlat2.xyz;\n    u_xlat16_2 = texture(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 * _ColorMulti;\n    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzy + u_xlat0.xyz;\n    u_xlat16_3 = u_xlat2.w;\n    u_xlat0.x = u_xlat16_3 * _Alpha;\n    SV_Target0.w = u_xlat0.x;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location = 0) out highp vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_COLOR0 = in_COLOR0 * _Color;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TEXCOORD0;\nin mediump vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_COLOR0 = in_COLOR0 * _Color;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nbvec3 u_xlatb4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb1 = vs_COLOR0.w==0.0;\n    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vs_COLOR0.xyzz).xyz;\n    u_xlatb4.x = u_xlatb4.y || u_xlatb4.x;\n    u_xlatb4.x = u_xlatb4.z || u_xlatb4.x;\n    u_xlatb1 = u_xlatb4.x && u_xlatb1;\n    if(u_xlatb1){\n        u_xlat16_1 = u_xlat10_0.wwww * u_xlat10_0;\n        u_xlat16_2.xyz = vs_COLOR0.xyz;\n        u_xlat16_2.w = 0.0;\n        SV_Target0 = u_xlat16_1 * u_xlat16_2;\n        return;\n    }\n    u_xlat16_1 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat10_0.www * u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_1.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nbvec3 u_xlatb4;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb1 = vs_COLOR0.w==0.0;\n    u_xlatb4.xyz = notEqual(vec4(0.0, 0.0, 0.0, 0.0), vs_COLOR0.xyzz).xyz;\n    u_xlatb4.x = u_xlatb4.y || u_xlatb4.x;\n    u_xlatb4.x = u_xlatb4.z || u_xlatb4.x;\n    u_xlatb1 = u_xlatb4.x && u_xlatb1;\n    if(u_xlatb1){\n        u_xlat16_1 = u_xlat16_0.wwww * u_xlat16_0;\n        u_xlat16_2.xyz = vs_COLOR0.xyz;\n        u_xlat16_2.w = 0.0;\n        SV_Target0 = u_xlat16_1 * u_xlat16_2;\n        return;\n    }\n    u_xlat16_1 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_1.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_COLOR0 = in_COLOR0 * _Color;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TEXCOORD0;\nin mediump vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_COLOR0 = in_COLOR0 * _Color;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_0.xyz = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0 = u_xlat16_0 * in_COLOR0;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_0.xyz = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0 = u_xlat16_0 * in_COLOR0;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nuniform lowp sampler2D _PlusTex;\nuniform lowp sampler2D _TexFadePlus;\nuniform lowp sampler2D _BaseTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat10_1.xyz = texture2D(_TexFadePlus, u_xlat0.xy).xyz;\n    u_xlat10_0.xyz = texture2D(_PlusTex, u_xlat0.xy).xyz;\n    u_xlatb6 = _ScaleFadePlus>=u_xlat10_0.x;\n    u_xlat7 = (u_xlatb6) ? 0.0 : 1.0;\n    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat1.xyz = vec3(u_xlat7) * u_xlat10_1.xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * vec3(u_xlat6) + u_xlat1.xyz;\n    u_xlat10_1 = texture2D(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 * _ColorMulti;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    SV_Target0.w = u_xlat1.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nUNITY_LOCATION(0) uniform mediump sampler2D _PlusTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _TexFadePlus;\nUNITY_LOCATION(2) uniform mediump sampler2D _BaseTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat16_1.xyz = texture(_TexFadePlus, u_xlat0.xy).xyz;\n    u_xlat16_0.xyz = texture(_PlusTex, u_xlat0.xy).xyz;\n    u_xlatb6 = _ScaleFadePlus>=u_xlat16_0.x;\n    u_xlat7 = (u_xlatb6) ? 0.0 : 1.0;\n    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);\n    u_xlat1.xyz = vec3(u_xlat7) * u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat6) + u_xlat1.xyz;\n    u_xlat16_1 = texture(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 * _ColorMulti;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    SV_Target0.w = u_xlat1.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nbvec2 u_xlatb2;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xzw = log2(u_xlat16_3.xyz);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xzw = exp2(u_xlat2.xzw);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xzw = max(u_xlat2.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat10_4.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat2.xzw * u_xlat16_3.xyz;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xzw = vec3(u_xlat21) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xzw);\n    u_xlat16_24 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_26 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_26);\n    u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_26) + u_xlat16_6.x;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity)) + u_xlat16_3.xyz;\n    SV_Target0.xyz = (u_xlatb2.y) ? u_xlat16_5.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nbvec2 u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat21);\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat21 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlatb2.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor, _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xzw = log2(u_xlat16_3.xyz);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xzw = exp2(u_xlat2.xzw);\n    u_xlat2.xzw = u_xlat2.xzw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xzw = max(u_xlat2.xzw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat2.xzw * u_xlat16_3.xyz;\n    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xzw = vec3(u_xlat21) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xzw);\n    u_xlat16_24 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_26 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_24 = u_xlat16_24 + (-u_xlat16_26);\n    u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_26) + u_xlat16_6.x;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_26;\n    u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity)) + u_xlat16_3.xyz;\n    SV_Target0.xyz = (u_xlatb2.y) ? u_xlat16_5.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xyz * u_xlat16_3.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat9 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_5.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_5.x) + u_xlat16_2.x;\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_8;\n    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _BaseColor;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat9 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_5.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_5.x) + u_xlat16_2.x;\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_8;\n    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat16_0 * _BaseColor;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_14 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_14, 0.00100000005);\n    u_xlat16_14 = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_14);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_1 = u_xlat10_1 * _BaseColor;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_1.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_1.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_14 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_14, 0.00100000005);\n    u_xlat16_14 = inversesqrt(u_xlat12);\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_14);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_3.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = u_xlat16_1.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_1.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2) * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n    u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) + 1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2) * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat24);\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat24 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb24 = 0.0<_SingleIndirectColor;\n    u_xlat1.xyz = (bool(u_xlatb24)) ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat3.xyz = log2(u_xlat16_2.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat3.xyz = exp2(u_xlat3.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_4.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat3.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat16_26 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_29 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_26 = u_xlat16_26 + (-u_xlat16_29);\n    u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_29 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_26 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_5.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat24);\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat24 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb24 = 0.0<_SingleIndirectColor;\n    u_xlat1.xyz = (bool(u_xlatb24)) ? u_xlat16_1.xyz : u_xlat0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat3.xyz = log2(u_xlat16_2.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat3.xyz = exp2(u_xlat3.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_2.xyz = u_xlat16_4.xyz * _BaseColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat3.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat16_26 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_29 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_26 = u_xlat16_26 + (-u_xlat16_29);\n    u_xlat16_6.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_6.x;\n    u_xlat16_29 = float(1.0) / u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_29 = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_26 = (-_RimMin) + _RimMax;\n    u_xlat16_26 = float(1.0) / u_xlat16_26;\n    u_xlat16_5.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_26 * -2.0 + 3.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n    u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump float u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat9 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_5 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_5) + u_xlat16_2.x;\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_5 = (-u_xlat16_5) + u_xlat16_8;\n    u_xlat16_5 = float(1.0) / u_xlat16_5;\n    u_xlat16_2.x = u_xlat16_5 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _BaseColor;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump float u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat9 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_5 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_5) + u_xlat16_2.x;\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_5 = (-u_xlat16_5) + u_xlat16_8;\n    u_xlat16_5 = float(1.0) / u_xlat16_5;\n    u_xlat16_2.x = u_xlat16_5 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat16_0 * _BaseColor;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_2.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nfloat u_xlat9;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat26 = max(u_xlat26, 0.00200000009);\n    u_xlat3.x = u_xlat26 * u_xlat26;\n    u_xlat11 = u_xlat24 * u_xlat3.x + (-u_xlat24);\n    u_xlat24 = u_xlat11 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat3.x = u_xlat3.x * 0.318309873;\n    u_xlat24 = u_xlat3.x / u_xlat24;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat17 = (-u_xlat26) + 1.0;\n    u_xlat2.x = abs(u_xlat1.x) * u_xlat17 + u_xlat26;\n    u_xlat17 = u_xlat9 * u_xlat17 + u_xlat26;\n    u_xlat10 = u_xlat25 * u_xlat26;\n    u_xlat10 = (-u_xlat10) * 0.280000001 + 1.0;\n    u_xlat17 = u_xlat17 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat9 * u_xlat2.x + u_xlat17;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat10_2.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xzw = u_xlat10_2.xzw * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat10_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_5.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat3.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_5.xxx + u_xlat16_12.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat25 + -0.5;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_21 = (-u_xlat9) + 1.0;\n    u_xlat16_29 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_29;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_21 + 1.0;\n    u_xlat16_5.x = u_xlat16_13.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat9 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat2.xzw * vec3(u_xlat16_29);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = u_xlat10_8.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_29);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat10_24 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_28 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_28 = u_xlat10_24 * _OcclusionStrength + u_xlat16_28;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat10) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_8.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_8.y) * _GlossMapScale + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat26 = max(u_xlat26, 0.00200000009);\n    u_xlat3.x = u_xlat26 * u_xlat26;\n    u_xlat11 = u_xlat24 * u_xlat3.x + (-u_xlat24);\n    u_xlat24 = u_xlat11 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat3.x = u_xlat3.x * 0.318309873;\n    u_xlat24 = u_xlat3.x / u_xlat24;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat17 = (-u_xlat26) + 1.0;\n    u_xlat2.x = abs(u_xlat1.x) * u_xlat17 + u_xlat26;\n    u_xlat17 = u_xlat9 * u_xlat17 + u_xlat26;\n    u_xlat10 = u_xlat25 * u_xlat26;\n    u_xlat10 = (-u_xlat10) * 0.280000001 + 1.0;\n    u_xlat17 = u_xlat17 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat9 * u_xlat2.x + u_xlat17;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat16_2.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_2.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xzw = u_xlat16_2.xzw * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat16_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_5.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat3.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_5.xxx + u_xlat16_12.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat25 + -0.5;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_21 = (-u_xlat9) + 1.0;\n    u_xlat16_29 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_29;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_21 + 1.0;\n    u_xlat16_5.x = u_xlat16_13.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat9 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_29 = (-u_xlat16_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat2.xzw * vec3(u_xlat16_29);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = u_xlat16_8.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_29);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat16_24 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_28 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_28 = u_xlat16_24 * _OcclusionStrength + u_xlat16_28;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat10) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp float u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec4 u_xlat2;\nfloat u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nlowp vec2 u_xlat10_10;\nfloat u_xlat11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat21;\nfloat u_xlat23;\nbool u_xlatb23;\nmediump float u_xlat16_25;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat10.xyz, u_xlat10.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;\n    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;\n    u_xlat30 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat10_10.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_10.y) * _GlossMapScale + 1.0;\n    u_xlat3 = u_xlat31 * u_xlat31;\n    u_xlat3 = max(u_xlat3, 0.00200000009);\n    u_xlat13 = u_xlat3 * u_xlat3;\n    u_xlat23 = u_xlat30 * u_xlat13 + (-u_xlat30);\n    u_xlat30 = u_xlat23 * u_xlat30 + 1.0;\n    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;\n    u_xlat13 = u_xlat13 * 0.318309873;\n    u_xlat30 = u_xlat13 / u_xlat30;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat11 = (-u_xlat3) + 1.0;\n    u_xlat21 = abs(u_xlat1.x) * u_xlat11 + u_xlat3;\n    u_xlat13 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat11 = u_xlat13 * u_xlat11 + u_xlat3;\n    u_xlat3 = u_xlat31 * u_xlat3;\n    u_xlat3 = (-u_xlat3) * 0.280000001 + 1.0;\n    u_xlat11 = u_xlat11 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat13 * u_xlat21 + u_xlat11;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat30 = u_xlat30 * u_xlat1.x;\n    u_xlat30 = u_xlat30 * 3.14159274;\n    u_xlat30 = max(u_xlat30, 9.99999975e-05);\n    u_xlat30 = sqrt(u_xlat30);\n    u_xlat30 = u_xlat13 * u_xlat30;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_14.xyz = u_xlat10_10.xxx * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb23 = u_xlat16_5.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat30 = u_xlat30 * u_xlat23;\n    u_xlat6.xyz = vec3(u_xlat30) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_15.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_15.x;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_15.xyz * u_xlat16_5.xxx + u_xlat16_14.xyz;\n    u_xlat6.xyz = u_xlat16_5.xyz * u_xlat6.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_5.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat31 + -0.5;\n    u_xlat16_15.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_25 = (-u_xlat13) + 1.0;\n    u_xlat16_35 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_35;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_5.x = u_xlat16_15.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat13 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_35 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_35 = u_xlat10_0 * _OcclusionStrength + u_xlat16_35;\n    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_35) + u_xlat16_5.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_35) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat3) * u_xlat16_7.xyz;\n    u_xlat16_35 = (-u_xlat10_10.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat10_10.y * _GlossMapScale + u_xlat16_35;\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_14.xyz) + vec3(u_xlat16_35);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_9.xyz + u_xlat16_14.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nfloat u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump vec2 u_xlat16_10;\nfloat u_xlat11;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat21;\nfloat u_xlat23;\nbool u_xlatb23;\nmediump float u_xlat16_25;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat10.xyz, u_xlat10.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;\n    u_xlat30 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD4.xyz;\n    u_xlat30 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_10.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_10.y) * _GlossMapScale + 1.0;\n    u_xlat3 = u_xlat31 * u_xlat31;\n    u_xlat3 = max(u_xlat3, 0.00200000009);\n    u_xlat13 = u_xlat3 * u_xlat3;\n    u_xlat23 = u_xlat30 * u_xlat13 + (-u_xlat30);\n    u_xlat30 = u_xlat23 * u_xlat30 + 1.0;\n    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;\n    u_xlat13 = u_xlat13 * 0.318309873;\n    u_xlat30 = u_xlat13 / u_xlat30;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat11 = (-u_xlat3) + 1.0;\n    u_xlat21 = abs(u_xlat1.x) * u_xlat11 + u_xlat3;\n    u_xlat13 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat11 = u_xlat13 * u_xlat11 + u_xlat3;\n    u_xlat3 = u_xlat31 * u_xlat3;\n    u_xlat3 = (-u_xlat3) * 0.280000001 + 1.0;\n    u_xlat11 = u_xlat11 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat13 * u_xlat21 + u_xlat11;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat30 = u_xlat30 * u_xlat1.x;\n    u_xlat30 = u_xlat30 * 3.14159274;\n    u_xlat30 = max(u_xlat30, 9.99999975e-05);\n    u_xlat30 = sqrt(u_xlat30);\n    u_xlat30 = u_xlat13 * u_xlat30;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_14.xyz = u_xlat16_10.xxx * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb23 = u_xlat16_5.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat30 = u_xlat30 * u_xlat23;\n    u_xlat6.xyz = vec3(u_xlat30) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_15.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_15.x;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_15.xyz * u_xlat16_5.xxx + u_xlat16_14.xyz;\n    u_xlat6.xyz = u_xlat16_5.xyz * u_xlat6.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_5.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat31 + -0.5;\n    u_xlat16_15.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_25 = (-u_xlat13) + 1.0;\n    u_xlat16_35 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_35;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_5.x = u_xlat16_15.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat13 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_35 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_35 = u_xlat16_0 * _OcclusionStrength + u_xlat16_35;\n    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_35) + u_xlat16_5.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_35) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat3) * u_xlat16_7.xyz;\n    u_xlat16_35 = (-u_xlat16_10.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_10.y * _GlossMapScale + u_xlat16_35;\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_14.xyz) + vec3(u_xlat16_35);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_9.xyz + u_xlat16_14.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nvec3 u_xlat8;\nlowp vec3 u_xlat10_8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat14 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat2.x = u_xlat22 * u_xlat15 + (-u_xlat22);\n    u_xlat22 = u_xlat2.x * u_xlat22 + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat15 = u_xlat15 / u_xlat22;\n    u_xlat22 = (-u_xlat8.x) + 1.0;\n    u_xlat2.x = abs(u_xlat21) * u_xlat22 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat8.x = abs(u_xlat21) * u_xlat8.x;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat2.x + u_xlat8.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat15 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_8.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_8.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat8.xyz = u_xlat10_8.xyz * _Color.xyz;\n    u_xlat16_11.xyz = u_xlat10_1.xxx * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat16_5.xxx;\n    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec2 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat16_1.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat14 = (-u_xlat16_1.y) * _GlossMapScale + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat2.x = u_xlat22 * u_xlat15 + (-u_xlat22);\n    u_xlat22 = u_xlat2.x * u_xlat22 + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat15 = u_xlat15 / u_xlat22;\n    u_xlat22 = (-u_xlat8.x) + 1.0;\n    u_xlat2.x = abs(u_xlat21) * u_xlat22 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat8.x = abs(u_xlat21) * u_xlat8.x;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat2.x + u_xlat8.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat15 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat16_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat16_8.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat8.xyz = u_xlat16_8.xyz * _Color.xyz;\n    u_xlat16_11.xyz = u_xlat16_1.xxx * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat8.xyz * u_xlat16_5.xxx;\n    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]