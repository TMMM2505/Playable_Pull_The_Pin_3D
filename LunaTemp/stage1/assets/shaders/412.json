{"id":412,"assetBundleId":-1,"data":[[],"Toony Colors Pro 2\/Standard PBS",null,["DIRECTIONAL","DIRLIGHTMAP_COMBINED","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_ON","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SHADOWS_DEPTH","SPOT","DYNAMICLIGHTMAP_ON","INSTANCING_ON","LIGHTMAP_SHADOW_MIXING","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_DETAIL_MULX2","_","___","__","SHADOWS_CUBE","SHADOWS_SOFT"],[[0,0,"FORWARD",4,"",0,[4,null],[0,"_ZWrite"],[2,null],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[[0,"_SrcBlend"],[0,"_DstBlend"],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDBASE"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","FOG_EXP","FOG_EXP2","FOG_LINEAR","INSTANCING_ON","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","UNITY_SINGLE_PASS_STEREO","VERTEXLIGHT_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","_","___","__"],[[["_","_NORMALMAP"],1],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["_","_EMISSION"],1],[["_","_METALLICGLOSSMAP"],1],[["___","_DETAIL_MULX2"],0],[["_","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],1],[["_","_SPECULARHIGHLIGHTS_OFF"],1],[["_","_GLOSSYREFLECTIONS_OFF"],1],[["_","_PARALLAXMAP"],1],[["_","TCP2_DISABLE_WRAPPED_LIGHT"],1],[["_","TCP2_RAMPTEXT"],1],[["_","TCP2_SPEC_TOON"],1],[["_","TCP2_STYLIZED_FRESNEL"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["__","INSTANCING_ON"],1],[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[0,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_54 = u_xlat16_54 * 0.5 + 0.5;\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_12.x = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_28 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_12.x = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_28 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) \/ u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    SV_Target0.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) \/ u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    SV_Target0.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat32 = max(u_xlat32, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_12.x * 0.5 + 0.5;\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_12.z = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_12.xz = (-vec2(u_xlat16_28)) + u_xlat16_12.xz;\n    u_xlat16_28 = float(1.0) \/ u_xlat16_12.z;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump vec3 u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_12.x = u_xlat16_12.x * 0.5 + 0.5;\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_12.z = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_12.xz = (-vec2(u_xlat16_28)) + u_xlat16_12.xz;\n    u_xlat16_28 = float(1.0) \/ u_xlat16_12.z;\n    u_xlat16_12.x = u_xlat16_28 * u_xlat16_12.x;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_44 = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_60 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_60 = clamp(u_xlat16_60, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat16_29.x = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat16_28) * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_29.x * u_xlat16_12.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_45 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_29.x = u_xlat16_29.x * u_xlat16_28 + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_29.x;\n    u_xlat16_12.x = u_xlat16_44 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_44 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_44 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_60 * u_xlat32 + (-u_xlat16_60);\n    u_xlat48 = u_xlat48 * u_xlat16_60 + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_44 * u_xlat16;\n    u_xlat16_44 = u_xlat0.x * 0.280000001;\n    u_xlat16_44 = (-u_xlat16_44) * u_xlat4 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_60!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_29.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_29.xyz = _SColor.www * u_xlat16_29.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_29.xyz) + _HColor.xyz;\n    u_xlat16_29.xyz = u_xlat16_12.xxx * u_xlat16_14.xyz + u_xlat16_29.xyz;\n    u_xlat16_29.xyz = u_xlat16_29.xyz * _LightColor0.xyz;\n    u_xlat16_29.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_29.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_13) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_15.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_14.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_44);\n    u_xlat16_12.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_28) * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26.x = (-u_xlat16_11.x) + u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_26.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat16_54 * -2.0 + 3.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_26.x = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_41 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_56 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(vec2(u_xlat16_56), vec2(u_xlat16_56));\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat46 + -0.5;\n    u_xlat16_54 = (-u_xlat16_11.x) * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_11.x;\n    u_xlat16_54 = u_xlat16_12.x * u_xlat16_54 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_27 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_11.x + 1.0;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_12.x;\n    u_xlat16_54 = u_xlat16_26.x * u_xlat16_54;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_26.x * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_26.x * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_41 * u_xlat30 + (-u_xlat16_41);\n    u_xlat45 = u_xlat45 * u_xlat16_41 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_26.x * u_xlat15;\n    u_xlat16_26.x = u_xlat0.x * 0.280000001;\n    u_xlat16_26.x = (-u_xlat16_26.x) * u_xlat46 + 1.0;\n    u_xlat16_41 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_41!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_13.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_56) + 1.0;\n    u_xlat16_54 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_54;\n    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_26.xxx;\n    u_xlat16_26.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_26.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) \/ u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) \/ u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    SV_Target0.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) \/ u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) \/ u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    SV_Target0.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_0) + 1.0;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_31 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_30;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) \/ u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) \/ u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_12 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_12;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0 + u_xlat16_27;\n    u_xlat16_0 = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_0);\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat29 = max(u_xlat29, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat10_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) \/ u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    u_xlat16_2.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nvec3 u_xlat17;\nvec3 u_xlat20;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nfloat u_xlat32;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nmediump float u_xlat16_50;\nmediump float u_xlat16_51;\nmediump float u_xlat16_53;\nmediump float u_xlat16_59;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_50 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_50);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat17.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_51 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_51 = u_xlat16_4 * _OcclusionStrength + u_xlat16_51;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat17.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat17.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat20.xyz = log2(u_xlat16_6.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat20.xyz = exp2(u_xlat20.xyz);\n    u_xlat20.xyz = u_xlat20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat20.xyz = max(u_xlat20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb48 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb48){\n        u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat48 = inversesqrt(u_xlat48);\n        u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat48 = min(u_xlat8.z, u_xlat48);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_53 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_53 = u_xlat4 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_53);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb48 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb48){\n        u_xlatb48 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb48){\n            u_xlat48 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat48 = inversesqrt(u_xlat48);\n            u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz \/ u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat48 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat48 = min(u_xlat8.z, u_xlat48);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat48) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_53);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_51) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat7.xyz = vec3(u_xlat48) * u_xlat16_12.xyz;\n    u_xlat16_59 = dot(u_xlat0.xyz, (-u_xlat17.xyz));\n    u_xlat16_12.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_28 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_44 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_44 = (-u_xlat16_28) + u_xlat16_44;\n    u_xlat16_28 = (-u_xlat16_28) + u_xlat16_12.x;\n    u_xlat16_44 = float(1.0) \/ u_xlat16_44;\n    u_xlat16_28 = u_xlat16_44 * u_xlat16_28;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_44 = u_xlat16_28 * -2.0 + 3.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_60 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_13.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_29 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_45 = dot(vec2(u_xlat16_29), vec2(u_xlat16_29));\n    u_xlat16_45 = u_xlat16_45 * u_xlat4 + -0.5;\n    u_xlat16_28 = (-u_xlat16_44) * u_xlat16_28 + 1.0;\n    u_xlat16_44 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_44;\n    u_xlat16_28 = u_xlat16_45 * u_xlat16_28 + 1.0;\n    u_xlat16_44 = -abs(u_xlat16_59) + 1.0;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_61 = u_xlat16_44 * u_xlat16_61;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_61 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_45;\n    u_xlat16_28 = u_xlat16_60 * u_xlat16_28;\n    u_xlat0.x = u_xlat4 * u_xlat4;\n    u_xlat16 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat32 = abs(u_xlat16_59) * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16_60 * u_xlat16 + u_xlat0.x;\n    u_xlat16 = u_xlat16 * abs(u_xlat16_59);\n    u_xlat16 = u_xlat16_60 * u_xlat32 + u_xlat16;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat32 = u_xlat0.x * u_xlat0.x;\n    u_xlat48 = u_xlat16_13.x * u_xlat32 + (-u_xlat16_13.x);\n    u_xlat48 = u_xlat48 * u_xlat16_13.x + 1.0;\n    u_xlat32 = u_xlat32 * 0.318309873;\n    u_xlat48 = u_xlat48 * u_xlat48 + 1.00000001e-07;\n    u_xlat32 = u_xlat32 \/ u_xlat48;\n    u_xlat16_59 = u_xlat32 * u_xlat16;\n    u_xlat16 = u_xlat16_59 * 3.14159274;\n    u_xlat16 = max(u_xlat16, 9.99999975e-05);\n    u_xlat16 = sqrt(u_xlat16);\n    u_xlat16_59 = u_xlat16_60 * u_xlat16;\n    u_xlat16_60 = u_xlat0.x * 0.280000001;\n    u_xlat16_60 = (-u_xlat16_60) * u_xlat4 + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_13.x!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_59 = u_xlat0.x * u_xlat16_59;\n    u_xlat16_14.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_14.xyz = _SColor.www * u_xlat16_14.xyz + _HColor.xyz;\n    u_xlat16_15.xyz = (-u_xlat16_14.xyz) + _HColor.xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_28) * u_xlat16_15.xyz + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat20.xyz * vec3(u_xlat16_51) + u_xlat16_14.xyz;\n    u_xlat16_50 = (-u_xlat16_50) + 1.0;\n    u_xlat16_50 = u_xlat16_50 + _Glossiness;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_15.xyz = vec3(u_xlat16_59) * _LightColor0.xyz;\n    u_xlat16_51 = (-u_xlat16_29) + 1.0;\n    u_xlat16_59 = u_xlat16_51 * u_xlat16_51;\n    u_xlat16_59 = u_xlat16_59 * u_xlat16_59;\n    u_xlat16_51 = u_xlat16_51 * u_xlat16_59;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_51) + u_xlat16_2.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_15.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_60);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_50);\n    u_xlat16_2.xyz = vec3(u_xlat16_61) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_50 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_44 + (-_RimMin);\n    u_xlat16_50 = float(1.0) \/ u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_50 * -2.0 + 3.0;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_50 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_3.x;\n    u_xlat16_50 = u_xlat16_12.x * u_xlat16_50;\n    u_xlat16_2.xyz = vec3(u_xlat16_50) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat35 = max(u_xlat35, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump float u_xlat16_14;\nvec3 u_xlat15;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat24 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat35 = (-u_xlat24) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat24 * u_xlat24;\n    u_xlat15.x = u_xlat16_33 * u_xlat35 + u_xlat4.x;\n    u_xlat35 = abs(u_xlat16_11) * u_xlat35 + u_xlat4.x;\n    u_xlat15.x = abs(u_xlat16_11) * u_xlat15.x;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat35 = u_xlat16_33 * u_xlat35 + u_xlat15.x;\n    u_xlat35 = u_xlat35 + 9.99999975e-06;\n    u_xlat35 = 0.5 \/ u_xlat35;\n    u_xlat15.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat15.x = max(u_xlat15.x, 0.00100000005);\n    u_xlat15.x = inversesqrt(u_xlat15.x);\n    u_xlat15.xyz = u_xlat16_3.xyz * u_xlat15.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat15.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat15.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_25 = u_xlat4.x * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat24 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat15.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat15.x = u_xlat15.x * 0.318309873;\n    u_xlat4.x = u_xlat15.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat35 * u_xlat4.x;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat35 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat4.x = abs(u_xlat24) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat35);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat35;\n    u_xlat35 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat35 = sqrt(u_xlat35);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat35;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb35 = u_xlat16_36!=0.0;\n    u_xlat35 = u_xlatb35 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat35 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat24 + -0.5;\n    u_xlat16_36 = (-u_xlat24) * u_xlat24 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_38 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_38;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_25) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nlowp float u_xlat10_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat10_46 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat10_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) \/ u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) \/ u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    u_xlat16_2.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nfloat u_xlat30;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nfloat u_xlat45;\nfloat u_xlat46;\nmediump float u_xlat16_46;\nmediump float u_xlat16_47;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_56;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_47 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_47);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat45 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * vs_TEXCOORD1.xyz;\n    u_xlat16_46 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_48 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_48 = u_xlat16_46 * _OcclusionStrength + u_xlat16_48;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz \/ u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz \/ u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat50 = min(u_xlat6.z, u_xlat50);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat50) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat50);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz \/ u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz \/ u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat50 = min(u_xlat7.z, u_xlat50);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_48) * u_xlat16_24.xyz;\n    u_xlat16_11.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat5.xyz = vec3(u_xlat45) * u_xlat16_11.xyz;\n    u_xlat16_48 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat16_54 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_11.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_26 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_26 = (-u_xlat16_11.x) + u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_54 + (-u_xlat16_11.x);\n    u_xlat16_26 = float(1.0) \/ u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_26 * u_xlat16_11.x;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_41 = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_56 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat16_56 = clamp(u_xlat16_56, 0.0, 1.0);\n    u_xlat16_12.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_27 = dot(u_xlat16_12.xx, u_xlat16_12.xx);\n    u_xlat16_27 = u_xlat16_27 * u_xlat46 + -0.5;\n    u_xlat16_11.x = (-u_xlat16_26) * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_26;\n    u_xlat16_11.x = u_xlat16_27 * u_xlat16_11.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat16_48) + 1.0;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_26 * u_xlat16_42;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_42 + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27;\n    u_xlat16_11.x = u_xlat16_41 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat46 * u_xlat46;\n    u_xlat15 = (-u_xlat46) * u_xlat46 + 1.0;\n    u_xlat30 = abs(u_xlat16_48) * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat16_41 * u_xlat15 + u_xlat0.x;\n    u_xlat15 = u_xlat15 * abs(u_xlat16_48);\n    u_xlat15 = u_xlat16_41 * u_xlat30 + u_xlat15;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat30 = u_xlat0.x * u_xlat0.x;\n    u_xlat45 = u_xlat16_56 * u_xlat30 + (-u_xlat16_56);\n    u_xlat45 = u_xlat45 * u_xlat16_56 + 1.0;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat45 = u_xlat45 * u_xlat45 + 1.00000001e-07;\n    u_xlat30 = u_xlat30 \/ u_xlat45;\n    u_xlat16_48 = u_xlat30 * u_xlat15;\n    u_xlat15 = u_xlat16_48 * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_48 = u_xlat16_41 * u_xlat15;\n    u_xlat16_41 = u_xlat0.x * 0.280000001;\n    u_xlat16_41 = (-u_xlat16_41) * u_xlat46 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb0 = u_xlat16_56!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_48 = u_xlat0.x * u_xlat16_48;\n    u_xlat16_13.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_13.xyz = _SColor.www * u_xlat16_13.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + _HColor.xyz;\n    u_xlat16_13.xyz = u_xlat16_11.xxx * u_xlat16_14.xyz + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * _LightColor0.xyz;\n    u_xlat16_47 = (-u_xlat16_47) + 1.0;\n    u_xlat16_47 = u_xlat16_47 + _Glossiness;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;\n    u_xlat16_48 = (-u_xlat16_12.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_12.xyw = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyw = u_xlat16_12.xyw * vec3(u_xlat16_48) + u_xlat16_2.xyz;\n    u_xlat16_12.xyw = u_xlat16_12.xyw * u_xlat16_14.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_13.xyz + u_xlat16_12.xyw;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);\n    u_xlat16_11.xzw = (-u_xlat16_2.xyz) + vec3(u_xlat16_47);\n    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_11.xzw + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_9.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_47 = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = u_xlat16_26 + (-_RimMin);\n    u_xlat16_47 = float(1.0) \/ u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_47 * -2.0 + 3.0;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_47 * _RimStrength;\n    u_xlat16_3.x = (-u_xlat46) * u_xlat46 + 1.33000004;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_47 = u_xlat16_47 * u_xlat16_3.x;\n    u_xlat16_47 = u_xlat16_54 * u_xlat16_47;\n    u_xlat16_2.xyz = vec3(u_xlat16_47) * _LightColor0.xyz + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nfloat u_xlat32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat31 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat22 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat32 = u_xlat31 * u_xlat31;\n    u_xlat4.x = u_xlat16_30 * u_xlat22 + u_xlat32;\n    u_xlat22 = abs(u_xlat16_10) * u_xlat22 + u_xlat32;\n    u_xlat4.x = abs(u_xlat16_10) * u_xlat4.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat22 = u_xlat16_30 * u_xlat22 + u_xlat4.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 \/ u_xlat22;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat32 * u_xlat32;\n    u_xlat16_23 = u_xlat32 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat22;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_33!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat22 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_33 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nvec3 u_xlat14;\nmediump float u_xlat16_20;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nfloat u_xlat32;\nbool u_xlatb32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat22 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat32 = (-u_xlat22) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat22 * u_xlat22;\n    u_xlat14.x = u_xlat16_30 * u_xlat32 + u_xlat4.x;\n    u_xlat32 = abs(u_xlat16_10) * u_xlat32 + u_xlat4.x;\n    u_xlat14.x = abs(u_xlat16_10) * u_xlat14.x;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat32 = u_xlat16_30 * u_xlat32 + u_xlat14.x;\n    u_xlat32 = u_xlat32 + 9.99999975e-06;\n    u_xlat32 = 0.5 \/ u_xlat32;\n    u_xlat14.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat14.x = max(u_xlat14.x, 0.00100000005);\n    u_xlat14.x = inversesqrt(u_xlat14.x);\n    u_xlat14.xyz = u_xlat16_3.xyz * u_xlat14.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat14.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_23 = u_xlat4.x * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat22 + 1.0;\n    u_xlat4.x = u_xlat16_3.x * u_xlat14.x + (-u_xlat16_3.x);\n    u_xlat4.x = u_xlat4.x * u_xlat16_3.x + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat14.x = u_xlat14.x * 0.318309873;\n    u_xlat4.x = u_xlat14.x \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat32 * u_xlat4.x;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat32 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat4.x = abs(u_xlat22) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat32);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat32;\n    u_xlat32 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat32 = sqrt(u_xlat32);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat32;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb32 = u_xlat16_33!=0.0;\n    u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat32 * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat22 + -0.5;\n    u_xlat16_33 = (-u_xlat22) * u_xlat22 + 1.33000004;\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_35 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_35;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_7.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat16_8.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_9.xyz = u_xlat4.www * u_xlat16_9.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_EMISSION"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) \/ u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_EMISSION"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat2.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat29 = u_xlat28 * u_xlat28;\n    u_xlat4.x = u_xlat16_27 * u_xlat20 + u_xlat29;\n    u_xlat20 = abs(u_xlat16_9) * u_xlat20 + u_xlat29;\n    u_xlat4.x = abs(u_xlat16_9) * u_xlat4.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat20 = u_xlat16_27 * u_xlat20 + u_xlat4.x;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat1.x = u_xlat29 * u_xlat29;\n    u_xlat16_21 = u_xlat29 * 0.280000001;\n    u_xlat16_21 = (-u_xlat16_21) * u_xlat28 + 1.0;\n    u_xlat10 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat10 = u_xlat10 * u_xlat16_3.x + 1.0;\n    u_xlat10 = u_xlat10 * u_xlat10 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat10;\n    u_xlat16_3.x = u_xlat1.x * u_xlat20;\n    u_xlat16_30 = _SpecSmooth * 0.5;\n    u_xlat16_30 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_30);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_30 = float(1.0) \/ u_xlat10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_30 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_30!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = dot(vec2(u_xlat16_12), vec2(u_xlat16_12));\n    u_xlat16_12 = u_xlat16_12 * u_xlat28 + -0.5;\n    u_xlat16_30 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_32 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_32;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_12 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_9 * u_xlat16_3.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_0.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat4.xyz;\n    u_xlat16_8.xyz = u_xlat4.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_27 = (-u_xlat16_0.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_0.x + u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_27;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + u_xlat16_0.xxx;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat10_1 * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat16_1 * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_36 = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_36;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_36;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_10.xyz = u_xlat16_10.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_36 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_0.xzw = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_23 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_10 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_10 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_10;\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_6.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_13 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_13;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_6.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_36 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_10) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_30 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = (-u_xlat16_10) * u_xlat16_0 + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_30 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_30 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_23 = u_xlat14 * 0.280000001;\n    u_xlat16_23 = (-u_xlat16_23) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat11 = u_xlat11 * u_xlat16_3.x + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_33 = _SpecSmooth * 0.5;\n    u_xlat16_33 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_33);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33;\n    u_xlat11 = abs(u_xlat31) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_33 = float(1.0) \/ u_xlat11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_33 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_36 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_36!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat31 + -0.5;\n    u_xlat16_36 = (-u_xlat31) * u_xlat31 + 1.33000004;\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_37;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_10 * u_xlat16_3.x;\n    u_xlat16_10 = u_xlat16_10 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_30 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_33) * u_xlat1.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * _Color.www;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_0 = (-u_xlat16_33) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_33 + u_xlat16_0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyw + u_xlat16_7.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_10;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_36 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_20 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat10_1 * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat16_1 * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nlowp float u_xlat10_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 \/ u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x \/ u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_25 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat10_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 \/ u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x \/ u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_25 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat16_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nlowp float u_xlat10_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 \/ u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x \/ u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_25 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat10_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nvec3 u_xlat10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat10.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat26 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat12.x = u_xlat16_16 * u_xlat26 + u_xlat4.x;\n    u_xlat26 = abs(u_xlat16_8) * u_xlat26 + u_xlat4.x;\n    u_xlat12.x = abs(u_xlat16_8) * u_xlat12.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat26 = u_xlat16_16 * u_xlat26 + u_xlat12.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 \/ u_xlat26;\n    u_xlat12.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xyz = u_xlat16_3.xyz * u_xlat12.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat12.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat12.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat12.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_11 = u_xlat4.x * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat18 + 1.0;\n    u_xlat4.x = u_xlat16_24 * u_xlat12.x + (-u_xlat16_24);\n    u_xlat4.x = u_xlat4.x * u_xlat16_24 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat4.x = u_xlat12.x \/ u_xlat4.x;\n    u_xlat16_24 = u_xlat26 * u_xlat4.x;\n    u_xlat26 = u_xlat16_24 * 3.14159274;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat16_24 = u_xlat16_16 * u_xlat26;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb26 = u_xlat16_19!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat26;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat18 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_25 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_25 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_11);\n    u_xlat16_27 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat16_27) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_27 + u_xlat16_29;\n    u_xlat16_27 = u_xlat16_2.y * _GlossMapScale + u_xlat16_29;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_27);\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xzw;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat10_4 * _Color;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_ALPHAPREMULTIPLY_ON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4 = u_xlat16_4 * _Color;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_19!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat1.x;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat4.xyz;\n    u_xlat16_7.xyz = u_xlat4.www * u_xlat16_7.xyz;\n    u_xlat16_0.xzw = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_19 = (-u_xlat16_3.x) + 1.0;\n    SV_Target0.w = u_xlat4.w * u_xlat16_3.x + u_xlat16_19;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_19;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_8 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_8 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_8;\n    u_xlat16_5.xyz = vec3(u_xlat16_8) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xzw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat10_1 * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat16_1 * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nlowp float u_xlat10_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_14 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_31 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat10_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_14;\nbool u_xlatb14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat12.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat12.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat14 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat4 * u_xlat4;\n    u_xlat34 = u_xlat16_20 * u_xlat14 + u_xlat24;\n    u_xlat14 = abs(u_xlat16_10) * u_xlat14 + u_xlat24;\n    u_xlat34 = abs(u_xlat16_10) * u_xlat34;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat14 = u_xlat16_20 * u_xlat14 + u_xlat34;\n    u_xlat14 = u_xlat14 + 9.99999975e-06;\n    u_xlat14 = 0.5 \/ u_xlat14;\n    u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat34 = max(u_xlat34, 0.00100000005);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat34);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat34 = u_xlat24 * u_xlat24;\n    u_xlat16_13 = u_xlat24 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat4 + 1.0;\n    u_xlat24 = u_xlat16_30 * u_xlat34 + (-u_xlat16_30);\n    u_xlat24 = u_xlat24 * u_xlat16_30 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat34 = u_xlat34 * 0.318309873;\n    u_xlat24 = u_xlat34 \/ u_xlat24;\n    u_xlat16_30 = u_xlat24 * u_xlat14;\n    u_xlat14 = u_xlat16_30 * 3.14159274;\n    u_xlat14 = max(u_xlat14, 9.99999975e-05);\n    u_xlat14 = sqrt(u_xlat14);\n    u_xlat16_30 = u_xlat16_20 * u_xlat14;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_14 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_14) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb14 = u_xlat16_33!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat14;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat4 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_31 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_31 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_8.xyz = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyw = vec3(u_xlat16_13) * u_xlat16_8.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_23 = (-u_xlat16_23) + 1.0;\n    u_xlat16_23 = u_xlat16_2.w * _GlossMapScale + u_xlat16_23;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_9.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_23);\n    u_xlat16_6.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyw * u_xlat16_6.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14.x * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14.x;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_34 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_0) + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat14;\nmediump float u_xlat16_20;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_10 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_10) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_10 = (-u_xlat16_10) + u_xlat16_20;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_20 = u_xlat16_0.x * u_xlat16_10;\n    u_xlat16_0.x = (-u_xlat16_10) * u_xlat16_0.x + 1.0;\n    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat31) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_10 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat31 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat31) * u_xlat31 + 1.0;\n    u_xlat14 = u_xlat31 * u_xlat31;\n    u_xlat24 = u_xlat16_20 * u_xlat4 + u_xlat14;\n    u_xlat4 = abs(u_xlat16_10) * u_xlat4 + u_xlat14;\n    u_xlat24 = abs(u_xlat16_10) * u_xlat24;\n    u_xlat16_10 = -abs(u_xlat16_10) + 1.0;\n    u_xlat4 = u_xlat16_20 * u_xlat4 + u_xlat24;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat24);\n    u_xlat16_30 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat16_13 = u_xlat14 * 0.280000001;\n    u_xlat16_13 = (-u_xlat16_13) * u_xlat31 + 1.0;\n    u_xlat11 = u_xlat16_30 * u_xlat1.x + (-u_xlat16_30);\n    u_xlat11 = u_xlat11 * u_xlat16_30 + 1.0;\n    u_xlat11 = u_xlat11 * u_xlat11 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat11;\n    u_xlat16_30 = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_30 * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_30 = u_xlat16_20 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_23 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_30 = u_xlat16_30 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _LightColor0.xyz;\n    u_xlat16_30 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat31 + -0.5;\n    u_xlat16_33 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_30 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_30;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_30 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_0.x = u_xlat16_30 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_23) * u_xlat1.xyz;\n    u_xlat16_3.x = (-u_xlat16_23) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_6.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_10) * u_xlat16_3.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_8.xyz * u_xlat16_0.xzw + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_30 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_30 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_30;\n    u_xlat16_6.xyz = vec3(u_xlat16_30) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_13) * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_6.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat10_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat10_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_11) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_33 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = (-u_xlat16_11) * u_xlat16_0 + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_3.x;\n    u_xlat16_0 = u_xlat16_14 * u_xlat16_0 + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_14;\n    u_xlat16_0 = u_xlat16_33 * u_xlat16_0;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0 = (-u_xlat16_36) + 1.0;\n    u_xlat16_0 = u_xlat16_2.w * _GlossMapScale + u_xlat16_0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_0);\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0 = u_xlat16_1 * _OcclusionStrength + u_xlat16_0;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_11;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_39 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_22 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat15 = max(u_xlat15, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nlowp float u_xlat10_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nlowp float u_xlat10_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_15 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat10_34 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_15;\nbool u_xlatb15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nmediump float u_xlat16_36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat13.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat13.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat4 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat15 = (-u_xlat4) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat4 * u_xlat4;\n    u_xlat37 = u_xlat16_33 * u_xlat15 + u_xlat26;\n    u_xlat15 = abs(u_xlat16_11) * u_xlat15 + u_xlat26;\n    u_xlat37 = abs(u_xlat16_11) * u_xlat37;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat15 = u_xlat16_33 * u_xlat15 + u_xlat37;\n    u_xlat15 = u_xlat15 + 9.99999975e-06;\n    u_xlat15 = 0.5 \/ u_xlat15;\n    u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat37 = max(u_xlat37, 0.00100000005);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat37);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat37 = u_xlat26 * u_xlat26;\n    u_xlat16_25 = u_xlat26 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat4 + 1.0;\n    u_xlat26 = u_xlat16_3.x * u_xlat37 + (-u_xlat16_3.x);\n    u_xlat26 = u_xlat26 * u_xlat16_3.x + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat26 = u_xlat37 \/ u_xlat26;\n    u_xlat16_3.x = u_xlat26 * u_xlat15;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat15 = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat26 = abs(u_xlat4) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat26;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat15);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat15;\n    u_xlat15 = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat15;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_15 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_15) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_15) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb15 = u_xlat16_39!=0.0;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14.x) + 1.0;\n    u_xlat16_14.x = dot(u_xlat16_14.xx, u_xlat16_14.xx);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat4 + -0.5;\n    u_xlat16_39 = (-u_xlat4) * u_xlat4 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_8.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14.x * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14.x;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_34 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_34 * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_8.xyz = u_xlat1.xyz * u_xlat16_0.xxx + u_xlat16_8.xyz;\n    u_xlat16_9.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_25) * u_xlat16_9.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_EMISSION","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat10_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat10_1.x = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat10_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat10_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","_EMISSION","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_22;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_33;\nfloat u_xlat34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_11) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_11 = (-u_xlat16_11) + u_xlat16_22;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_33 = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = (-u_xlat16_11) * u_xlat16_0.x + 1.0;\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat2.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_11 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat34 = (-u_xlat16_2.w) * _GlossMapScale + 1.0;\n    u_xlat4 = (-u_xlat34) * u_xlat34 + 1.0;\n    u_xlat15 = u_xlat34 * u_xlat34;\n    u_xlat26 = u_xlat16_33 * u_xlat4 + u_xlat15;\n    u_xlat4 = abs(u_xlat16_11) * u_xlat4 + u_xlat15;\n    u_xlat26 = abs(u_xlat16_11) * u_xlat26;\n    u_xlat16_11 = -abs(u_xlat16_11) + 1.0;\n    u_xlat4 = u_xlat16_33 * u_xlat4 + u_xlat26;\n    u_xlat4 = u_xlat4 + 9.99999975e-06;\n    u_xlat4 = 0.5 \/ u_xlat4;\n    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = u_xlat16_3.xyz * vec3(u_xlat26);\n    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_14 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);\n    u_xlat1.x = u_xlat15 * u_xlat15;\n    u_xlat16_25 = u_xlat15 * 0.280000001;\n    u_xlat16_25 = (-u_xlat16_25) * u_xlat34 + 1.0;\n    u_xlat12 = u_xlat16_3.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat12 = u_xlat12 * u_xlat16_3.x + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat12 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat12;\n    u_xlat16_3.x = u_xlat1.x * u_xlat4;\n    u_xlat16_36 = _SpecSmooth * 0.5;\n    u_xlat16_36 = u_xlat16_3.x * 3.14159274 + (-u_xlat16_36);\n    u_xlat1.x = u_xlat16_3.x * 3.14159274;\n    u_xlat16_3.x = u_xlat16_36 + u_xlat16_36;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36;\n    u_xlat12 = abs(u_xlat34) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_36 = float(1.0) \/ u_xlat12;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_36 + (-u_xlat1.x);\n    u_xlat16_3.x = _SpecBlend * u_xlat16_3.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_3.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_3.x = u_xlat16_33 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.x = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_36 = (-u_xlat16_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_39 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_7.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = dot(vec2(u_xlat16_14), vec2(u_xlat16_14));\n    u_xlat16_14 = u_xlat16_14 * u_xlat34 + -0.5;\n    u_xlat16_39 = (-u_xlat34) * u_xlat34 + 1.33000004;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_40 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_40;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;\n    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;\n    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x + 1.0;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 + (-_RimMin);\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_3.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_14;\n    u_xlat16_0.x = u_xlat16_33 * u_xlat16_0.x;\n    u_xlat16_8.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_8.xyz = _SColor.www * u_xlat16_8.xyz + _HColor.xyz;\n    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * u_xlat1.xyz;\n    u_xlat16_0.x = (-u_xlat16_36) + 1.0;\n    u_xlat16_0.x = u_xlat16_2.w * _GlossMapScale + u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_0.xxx;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_0.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_0.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_0.x;\n    u_xlat16_7.xyz = u_xlat16_0.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_25) * u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xyw + u_xlat16_6.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_11;\n    u_xlat16_0.x = u_xlat16_0.x * _RimStrength;\n    u_xlat16_0.x = u_xlat16_39 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_22 * u_xlat16_0.x;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * _LightColor0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) \/ u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) \/ u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","TCP2_SPEC_TOON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat10_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","TCP2_DISABLE_WRAPPED_LIGHT","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP","TCP2_SPEC_TOON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nfloat u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nvec3 u_xlat11;\nmediump float u_xlat16_12;\nvec3 u_xlat13;\nmediump float u_xlat16_18;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9;\n    u_xlat16_0.x = (-u_xlat16_9) * u_xlat16_0.x + 1.0;\n    u_xlat2 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat11.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat11.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat20 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat20) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat20 * u_xlat20;\n    u_xlat13.x = u_xlat16_18 * u_xlat29 + u_xlat4.x;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat4.x;\n    u_xlat13.x = abs(u_xlat16_9) * u_xlat13.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat13.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat13.x = max(u_xlat13.x, 0.00100000005);\n    u_xlat13.x = inversesqrt(u_xlat13.x);\n    u_xlat13.xyz = u_xlat16_3.xyz * u_xlat13.xxx;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat13.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat13.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat13.x = u_xlat4.x * u_xlat4.x;\n    u_xlat16_12 = u_xlat4.x * 0.280000001;\n    u_xlat16_12 = (-u_xlat16_12) * u_xlat20 + 1.0;\n    u_xlat4.x = u_xlat16_27 * u_xlat13.x + (-u_xlat16_27);\n    u_xlat4.x = u_xlat4.x * u_xlat16_27 + 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat4.x = u_xlat13.x \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat29 * u_xlat4.x;\n    u_xlat16_21 = _SpecSmooth * 0.5;\n    u_xlat16_21 = u_xlat16_27 * 3.14159274 + (-u_xlat16_21);\n    u_xlat29 = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_21 + u_xlat16_21;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat4.x = abs(u_xlat20) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_21 = float(1.0) \/ u_xlat4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21 + (-u_xlat29);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat29;\n    u_xlat29 = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat16_27 = u_xlat16_18 * u_xlat29;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_21!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat29;\n    u_xlat16_6.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat20 + -0.5;\n    u_xlat16_21 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_21;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = log2(u_xlat16_7.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat1.xyz = exp2(u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_27 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_3.x * u_xlat16_9 + 1.0;\n    u_xlat16_0.x = u_xlat16_27 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_3.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_3.x = u_xlat16_28 * _OcclusionStrength + u_xlat16_3.x;\n    u_xlat16_0.xzw = u_xlat1.xyz * u_xlat16_3.xxx + u_xlat16_0.xzw;\n    u_xlat16_3.xzw = u_xlat16_3.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xzw * vec3(u_xlat16_12);\n    u_xlat16_30 = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat4.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_2.y * _GlossMapScale + u_xlat16_30;\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_30);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat10_2.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat10_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) \/ u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat10_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat10_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[0,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_EMISSION","TCP2_SPEC_TOON","_GLOSSYREFLECTIONS_OFF","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nbool u_xlatb18;\nmediump float u_xlat16_19;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat26;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_8) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_16 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_8 = (-u_xlat16_8) + u_xlat16_16;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_16 = u_xlat16_0.x * u_xlat16_8;\n    u_xlat16_0.x = (-u_xlat16_8) * u_xlat16_0.x + 1.0;\n    u_xlat25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_8 = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat16_2.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat25 = (-u_xlat16_2.y) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat25) * u_xlat25 + 1.0;\n    u_xlat26 = u_xlat25 * u_xlat25;\n    u_xlat4.x = u_xlat16_16 * u_xlat18 + u_xlat26;\n    u_xlat18 = abs(u_xlat16_8) * u_xlat18 + u_xlat26;\n    u_xlat4.x = abs(u_xlat16_8) * u_xlat4.x;\n    u_xlat16_8 = -abs(u_xlat16_8) + 1.0;\n    u_xlat18 = u_xlat16_16 * u_xlat18 + u_xlat4.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat4.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat4.x = max(u_xlat4.x, 0.00100000005);\n    u_xlat4.x = inversesqrt(u_xlat4.x);\n    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xxx;\n    u_xlat16_24 = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat26 * u_xlat26;\n    u_xlat16_11 = u_xlat26 * 0.280000001;\n    u_xlat16_11 = (-u_xlat16_11) * u_xlat25 + 1.0;\n    u_xlat9 = u_xlat16_24 * u_xlat1.x + (-u_xlat16_24);\n    u_xlat9 = u_xlat9 * u_xlat16_24 + 1.0;\n    u_xlat9 = u_xlat9 * u_xlat9 + 1.00000001e-07;\n    u_xlat1.x = u_xlat1.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x \/ u_xlat9;\n    u_xlat16_24 = u_xlat1.x * u_xlat18;\n    u_xlat16_19 = _SpecSmooth * 0.5;\n    u_xlat16_19 = u_xlat16_24 * 3.14159274 + (-u_xlat16_19);\n    u_xlat1.x = u_xlat16_24 * 3.14159274;\n    u_xlat16_24 = u_xlat16_19 + u_xlat16_19;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_24 * -2.0 + 3.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat9 = abs(u_xlat25) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_19 = float(1.0) \/ u_xlat9;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19 + (-u_xlat1.x);\n    u_xlat16_24 = _SpecBlend * u_xlat16_24 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_24, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_24 = u_xlat16_16 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_19 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb18 = u_xlat16_19!=0.0;\n    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);\n    u_xlat16_24 = u_xlat16_24 * u_xlat18;\n    u_xlat16_6.xyz = vec3(u_xlat16_24) * _LightColor0.xyz;\n    u_xlat16_24 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = dot(u_xlat16_3.xx, u_xlat16_3.xx);\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat25 + -0.5;\n    u_xlat16_19 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_19;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_24) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_24 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_24;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x + 1.0;\n    u_xlat16_24 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_24;\n    u_xlat16_24 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_0.x = u_xlat16_24 * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_16 * u_xlat16_0.x;\n    u_xlat16_3.xzw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_3.xzw = _SColor.www * u_xlat16_3.xzw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_3.xzw) + _HColor.xyz;\n    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_3.xzw;\n    u_xlat16_0.xzw = u_xlat16_0.xzw * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat16_2.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_2.y * _GlossMapScale + u_xlat16_3.x;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.xzw = (-u_xlat16_5.xyz) + u_xlat16_3.xxx;\n    u_xlat16_3.xzw = vec3(u_xlat16_8) * u_xlat16_3.xzw + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_7.xyz * u_xlat16_0.xzw + u_xlat16_6.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_5.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_11) * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_3.xzw + u_xlat16_0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0]],[],0],[1,0,"FORWARD_DELTA",5,"",0,[4,null],[0,null],[2,null],[[0,"_SrcBlend"],[1,null],[0,null]],[[0,"_SrcBlend"],[1,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDADD"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["DIRECTIONAL","DIRECTIONAL_COOKIE","FOG_EXP","FOG_EXP2","FOG_LINEAR","LIGHTMAP_SHADOW_MIXING","POINT","POINT_COOKIE","SHADOWS_CUBE","SHADOWS_DEPTH","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","SHADOWS_SOFT","SPOT","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_RAMPTEXT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_DETAIL_MULX2","_METALLICGLOSSMAP","_NORMALMAP","_PARALLAXMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A","_SPECULARHIGHLIGHTS_OFF","_","___","__"],[[["_","_NORMALMAP"],1],[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["_","_METALLICGLOSSMAP"],1],[["_","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],1],[["_","_SPECULARHIGHLIGHTS_OFF"],1],[["___","_DETAIL_MULX2"],0],[["_","_PARALLAXMAP"],1],[["_","TCP2_DISABLE_WRAPPED_LIGHT"],1],[["_","TCP2_RAMPTEXT"],1],[["_","TCP2_SPEC_TOON"],1],[["_","TCP2_STYLIZED_FRESNEL"],1],[["__","FOG_LINEAR","FOG_EXP","FOG_EXP2"],1],[["POINT"],0],[["DIRECTIONAL"],0],[["SPOT"],0],[["POINT_COOKIE"],0],[["DIRECTIONAL_COOKIE"],0],[["POINT","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT"],0],[["SPOT","SHADOWS_DEPTH","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT_COOKIE","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec2 u_xlat10_9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat9.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat10_9.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat10_9.y) * _GlossMapScale + 1.0;\n    u_xlat27 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat30 = u_xlat16_29 * u_xlat27 + u_xlat28;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27 + u_xlat28;\n    u_xlat28 = u_xlat28 * u_xlat28;\n    u_xlat30 = abs(u_xlat16_2.x) * u_xlat30;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat27 = u_xlat16_29 * u_xlat27 + u_xlat30;\n    u_xlat27 = u_xlat27 + 9.99999975e-06;\n    u_xlat27 = 0.5 \/ u_xlat27;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_20 * u_xlat28 + (-u_xlat16_20);\n    u_xlat0 = u_xlat0 * u_xlat16_20 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat28 * 0.318309873;\n    u_xlat0 = u_xlat1.x \/ u_xlat0;\n    u_xlat16_20 = u_xlat0 * u_xlat27;\n    u_xlat0 = u_xlat16_20 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat10_9.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat10_9.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb0 = u_xlat16_33!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat0 * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_33 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec2 u_xlat16_9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat9.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat16_9.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat18 = (-u_xlat16_9.y) * _GlossMapScale + 1.0;\n    u_xlat27 = (-u_xlat18) * u_xlat18 + 1.0;\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat30 = u_xlat16_29 * u_xlat27 + u_xlat28;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27 + u_xlat28;\n    u_xlat28 = u_xlat28 * u_xlat28;\n    u_xlat30 = abs(u_xlat16_2.x) * u_xlat30;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat27 = u_xlat16_29 * u_xlat27 + u_xlat30;\n    u_xlat27 = u_xlat27 + 9.99999975e-06;\n    u_xlat27 = 0.5 \/ u_xlat27;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_20 * u_xlat28 + (-u_xlat16_20);\n    u_xlat0 = u_xlat0 * u_xlat16_20 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat28 * 0.318309873;\n    u_xlat0 = u_xlat1.x \/ u_xlat0;\n    u_xlat16_20 = u_xlat0 * u_xlat27;\n    u_xlat0 = u_xlat16_20 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat16_9.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat16_9.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb0 = u_xlat16_33!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat0 * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_33 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_20) + u_xlat16_11;\n    u_xlat16_11 = float(1.0) \/ u_xlat16_11;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_4.x = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = (-u_xlat16_20) * u_xlat16_11 + 1.0;\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_4.x * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2);\n    u_xlat16_2 = -abs(u_xlat16_2) + 1.0;\n    u_xlat18 = u_xlat16_4.x * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat16_13.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_13.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 \/ u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_4.x * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_13.x) + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_13.xx, u_xlat16_13.xx);\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat9.x + -0.5;\n    u_xlat16_22 = (-u_xlat9.x) * u_xlat9.x + 1.33000004;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_31 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_31;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_13.x * u_xlat16_11 + 1.0;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_20;\n    u_xlat16_2 = u_xlat16_2 + (-_RimMin);\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_20 + 1.0;\n    u_xlat16_11 = u_xlat16_20 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_4.x * u_xlat16_11;\n    u_xlat16_4.xyw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_4.xyw = _SColor.www * u_xlat16_4.xyw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_4.xyw) + _HColor.xyz;\n    u_xlat16_4.xyw = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_4.xyw;\n    u_xlat16_4.xyw = u_xlat16_4.xyw * _LightColor0.xyz;\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * vec3(u_xlat16_11);\n    u_xlat16_4.xyw = u_xlat16_7.xyz * u_xlat16_4.xyw + u_xlat16_6.xyz;\n    u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) \/ u_xlat16_11;\n    u_xlat16_2 = u_xlat16_11 * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_11;\n    u_xlat16_2 = u_xlat16_2 * _RimStrength;\n    u_xlat16_2 = u_xlat16_22 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_29 * u_xlat16_2;\n    SV_Target0.xyz = vec3(u_xlat16_2) * _LightColor0.xyz + u_xlat16_4.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2 = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11 = (-u_xlat16_20) + u_xlat16_11;\n    u_xlat16_11 = float(1.0) \/ u_xlat16_11;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_4.x = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = (-u_xlat16_20) * u_xlat16_11 + 1.0;\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_4.x * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2);\n    u_xlat16_2 = -abs(u_xlat16_2) + 1.0;\n    u_xlat18 = u_xlat16_4.x * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat16_13.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_13.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 \/ u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_7.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_13.x) + 1.0;\n    u_xlat16_13.x = dot(u_xlat16_13.xx, u_xlat16_13.xx);\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat9.x + -0.5;\n    u_xlat16_22 = (-u_xlat9.x) * u_xlat9.x + 1.33000004;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_31 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_31;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_20 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_20;\n    u_xlat16_11 = u_xlat16_13.x * u_xlat16_11 + 1.0;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_2 * u_xlat16_20;\n    u_xlat16_2 = u_xlat16_2 + (-_RimMin);\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_20 + 1.0;\n    u_xlat16_11 = u_xlat16_20 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_4.x * u_xlat16_11;\n    u_xlat16_4.xyw = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_4.xyw = _SColor.www * u_xlat16_4.xyw + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_4.xyw) + _HColor.xyz;\n    u_xlat16_4.xyw = vec3(u_xlat16_11) * u_xlat16_7.xyz + u_xlat16_4.xyw;\n    u_xlat16_4.xyw = u_xlat16_4.xyw * _LightColor0.xyz;\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * vec3(u_xlat16_11);\n    u_xlat16_4.xyw = u_xlat16_7.xyz * u_xlat16_4.xyw + u_xlat16_6.xyz;\n    u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) \/ u_xlat16_11;\n    u_xlat16_2 = u_xlat16_11 * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_11;\n    u_xlat16_2 = u_xlat16_2 * _RimStrength;\n    u_xlat16_2 = u_xlat16_22 * u_xlat16_2;\n    u_xlat16_2 = u_xlat16_29 * u_xlat16_2;\n    SV_Target0.xyz = vec3(u_xlat16_2) * _LightColor0.xyz + u_xlat16_4.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat10_2 * _Color;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat16_2 * _Color;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat10_0.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * 0.5 + 0.5;\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = (-u_xlat8.x) * u_xlat8.x + 1.0;\n    u_xlat24 = u_xlat8.x * u_xlat8.x;\n    u_xlat25 = u_xlat16_26 * u_xlat16 + u_xlat24;\n    u_xlat16 = abs(u_xlat16_2.x) * u_xlat16 + u_xlat24;\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat25 = u_xlat25 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat16 = u_xlat16_26 * u_xlat16 + u_xlat25;\n    u_xlat16 = u_xlat16 + 9.99999975e-06;\n    u_xlat16 = 0.5 \/ u_xlat16;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_18 * u_xlat24 + (-u_xlat16_18);\n    u_xlat0.x = u_xlat0.x * u_xlat16_18 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat24 = u_xlat24 * 0.318309873;\n    u_xlat0.x = u_xlat24 \/ u_xlat0.x;\n    u_xlat16_18 = u_xlat0.x * u_xlat16;\n    u_xlat0.x = u_xlat16_18 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0.x;\n    u_xlat16_0.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat16_0.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_0.xzw * _Color.xyz;\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_6.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat1.x * u_xlat16_18;\n    u_xlat16_6.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat8.x + -0.5;\n    u_xlat16_30 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_6.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xzw * vec3(u_xlat16_26);\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat10_2 * _Color;\n    u_xlat16_6.xyz = u_xlat10_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_27 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9) * u_xlat21;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat12 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2 = u_xlat16_2 * _Color;\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_31!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat2.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat2.www * u_xlat16_8.xyz;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = u_xlat2.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat9.x = (-u_xlat10_4.w) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_29 * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2.x) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat18 = u_xlat16_29 * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 \/ u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0.x;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_14.xyz = vec3(u_xlat10_1) * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7 = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_16.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb1 = u_xlat16_16.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_16.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_8.x = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_16.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_16.xyz = u_xlat0.xzw * vec3(u_xlat16_7);\n    u_xlat16_16.xyz = u_xlat16_16.xyz * _Color.www;\n    SV_Target0.xyz = u_xlat16_16.xyz * u_xlat16_2.xyz + u_xlat16_14.xyz;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_7 + u_xlat16_2.x;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat9.xyz));\n    u_xlat16_11.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_11.x = (-u_xlat16_20) + u_xlat16_11.x;\n    u_xlat16_11.x = float(1.0) \/ u_xlat16_11.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_29 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_29;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_11.x * -2.0 + 3.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_29 = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = (-u_xlat16_20) * u_xlat16_11.x + 1.0;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat9.x = (-u_xlat16_4.w) * _GlossMapScale + 1.0;\n    u_xlat18 = (-u_xlat9.x) * u_xlat9.x + 1.0;\n    u_xlat27 = u_xlat9.x * u_xlat9.x;\n    u_xlat28 = u_xlat16_29 * u_xlat18 + u_xlat27;\n    u_xlat18 = abs(u_xlat16_2.x) * u_xlat18 + u_xlat27;\n    u_xlat27 = u_xlat27 * u_xlat27;\n    u_xlat28 = u_xlat28 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat18 = u_xlat16_29 * u_xlat18 + u_xlat28;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 \/ u_xlat18;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_20 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_20 * u_xlat27 + (-u_xlat16_20);\n    u_xlat0.x = u_xlat0.x * u_xlat16_20 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat27 \/ u_xlat0.x;\n    u_xlat16_20 = u_xlat0.x * u_xlat18;\n    u_xlat0.x = u_xlat16_20 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_20 = u_xlat16_29 * u_xlat0.x;\n    u_xlat16_14.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_14.xyz = vec3(u_xlat16_1) * u_xlat16_14.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7 = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_16.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlatb1 = u_xlat16_16.x!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_20 = u_xlat1.x * u_xlat16_20;\n    u_xlat16_16.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_20 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_8.x = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_14.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_8.xyz * vec3(u_xlat16_20) + u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_16.xyz;\n    u_xlat16_20 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_20;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_20 = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_20;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_11.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_11.x;\n    u_xlat16_2.x = u_xlat16_29 * u_xlat16_2.x;\n    u_xlat16_11.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_11.xyz = _SColor.www * u_xlat16_11.xyz + _HColor.xyz;\n    u_xlat16_16.xyz = (-u_xlat16_11.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_16.xyz + u_xlat16_11.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_16.xyz = u_xlat0.xzw * vec3(u_xlat16_7);\n    u_xlat16_16.xyz = u_xlat16_16.xyz * _Color.www;\n    SV_Target0.xyz = u_xlat16_16.xyz * u_xlat16_2.xyz + u_xlat16_14.xyz;\n    u_xlat16_2.x = (-u_xlat16_7) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_7 + u_xlat16_2.x;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_ALPHAPREMULTIPLY_ON","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_31 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb2 = u_xlat16_31!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat2.x * u_xlat16_4.x;\n    u_xlat16_7.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_31 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_4.xxx + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;\n    u_xlat16_4.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_9 * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_4.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_4.x;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _Color.www;\n    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_31 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_6.xyz;\n    u_xlat16_0 = (-u_xlat16_22) + 1.0;\n    SV_Target0.w = _Color.w * u_xlat16_22 + u_xlat16_0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat8.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat24 = (-u_xlat16) * u_xlat16 + 1.0;\n    u_xlat25 = u_xlat16 * u_xlat16;\n    u_xlat27 = u_xlat16_26 * u_xlat24 + u_xlat25;\n    u_xlat24 = abs(u_xlat16_2.x) * u_xlat24 + u_xlat25;\n    u_xlat25 = u_xlat25 * u_xlat25;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat24 = u_xlat16_26 * u_xlat24 + u_xlat27;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 \/ u_xlat24;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_18 * u_xlat25 + (-u_xlat16_18);\n    u_xlat0 = u_xlat0 * u_xlat16_18 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat25 * 0.318309873;\n    u_xlat0 = u_xlat1.x \/ u_xlat0;\n    u_xlat16_18 = u_xlat0 * u_xlat24;\n    u_xlat0 = u_xlat16_18 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_12.xyz = u_xlat10_1.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1 = u_xlat10_1 * _Color;\n    u_xlat16_12.xyz = u_xlat10_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_14.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb0 = u_xlat16_14.x!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat0 * u_xlat16_18;\n    u_xlat16_14.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16 + -0.5;\n    u_xlat16_7.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_14.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_6);\n    u_xlat16_14.xyz = u_xlat1.www * u_xlat16_14.xyz;\n    SV_Target0.xyz = u_xlat16_14.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.x = (-u_xlat16_6) + 1.0;\n    SV_Target0.w = u_xlat1.w * u_xlat16_6 + u_xlat16_2.x;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_ALPHAPREMULTIPLY_ON","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec2 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nvoid main()\n{\n    u_xlat0 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat8.xyz = vec3(u_xlat0) * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat8.xyz));\n    u_xlat16_10.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_18 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_10.x = (-u_xlat16_18) + u_xlat16_10.x;\n    u_xlat16_10.x = float(1.0) \/ u_xlat16_10.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_18 = (-u_xlat16_18) + u_xlat16_26;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);\n    u_xlat16_18 = u_xlat16_10.x * -2.0 + 3.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_26 = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = (-u_xlat16_18) * u_xlat16_10.x + 1.0;\n    u_xlat16_8.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat16_8.y) * _GlossMapScale + 1.0;\n    u_xlat24 = (-u_xlat16) * u_xlat16 + 1.0;\n    u_xlat25 = u_xlat16 * u_xlat16;\n    u_xlat27 = u_xlat16_26 * u_xlat24 + u_xlat25;\n    u_xlat24 = abs(u_xlat16_2.x) * u_xlat24 + u_xlat25;\n    u_xlat25 = u_xlat25 * u_xlat25;\n    u_xlat27 = abs(u_xlat16_2.x) * u_xlat27;\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat24 = u_xlat16_26 * u_xlat24 + u_xlat27;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 \/ u_xlat24;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat0) + u_xlat3.xyz;\n    u_xlat0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat0 = max(u_xlat0, 0.00100000005);\n    u_xlat0 = inversesqrt(u_xlat0);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_4.xyz;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat16_18 * u_xlat25 + (-u_xlat16_18);\n    u_xlat0 = u_xlat0 * u_xlat16_18 + 1.0;\n    u_xlat0 = u_xlat0 * u_xlat0 + 1.00000001e-07;\n    u_xlat1.x = u_xlat25 * 0.318309873;\n    u_xlat0 = u_xlat1.x \/ u_xlat0;\n    u_xlat16_18 = u_xlat0 * u_xlat24;\n    u_xlat0 = u_xlat16_18 * 3.14159274;\n    u_xlat0 = max(u_xlat0, 9.99999975e-05);\n    u_xlat0 = sqrt(u_xlat0);\n    u_xlat16_18 = u_xlat16_26 * u_xlat0;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_12.xyz = u_xlat16_1.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1 = u_xlat16_1 * _Color;\n    u_xlat16_12.xyz = u_xlat16_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6 = (-u_xlat16_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_14.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb0 = u_xlat16_14.x!=0.0;\n    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_18 = u_xlat0 * u_xlat16_18;\n    u_xlat16_14.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;\n    u_xlat16_18 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16 + -0.5;\n    u_xlat16_7.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_18) + u_xlat16_12.xyz;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = u_xlat16_4.x * u_xlat16_2.x + 1.0;\n    u_xlat16_18 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_18;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_10.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10.x;\n    u_xlat16_2.x = u_xlat16_26 * u_xlat16_2.x;\n    u_xlat16_10.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_10.xyz = _SColor.www * u_xlat16_10.xyz + _HColor.xyz;\n    u_xlat16_14.xyz = (-u_xlat16_10.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_14.xyz + u_xlat16_10.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_14.xyz = u_xlat1.xyz * vec3(u_xlat16_6);\n    u_xlat16_14.xyz = u_xlat1.www * u_xlat16_14.xyz;\n    SV_Target0.xyz = u_xlat16_14.xyz * u_xlat16_2.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.x = (-u_xlat16_6) + 1.0;\n    SV_Target0.w = u_xlat1.w * u_xlat16_6 + u_xlat16_2.x;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_12.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_12.x = (-u_xlat16_22) + u_xlat16_12.x;\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_12.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_32 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_32;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_32 = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = (-u_xlat16_22) * u_xlat16_12.x + 1.0;\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10.x = (-u_xlat10_4.w) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat10.x) * u_xlat10.x + 1.0;\n    u_xlat30 = u_xlat10.x * u_xlat10.x;\n    u_xlat31 = u_xlat16_32 * u_xlat20 + u_xlat30;\n    u_xlat20 = abs(u_xlat16_2.x) * u_xlat20 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat31 = u_xlat31 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat20 = u_xlat16_32 * u_xlat20 + u_xlat31;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_22 * u_xlat30 + (-u_xlat16_22);\n    u_xlat0.x = u_xlat0.x * u_xlat16_22 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat0.x = u_xlat30 \/ u_xlat0.x;\n    u_xlat16_22 = u_xlat0.x * u_xlat20;\n    u_xlat0.x = u_xlat16_22 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_22 = u_xlat16_32 * u_xlat0.x;\n    u_xlat16_15.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat10_1 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_15.xyz = vec3(u_xlat10_1) * u_xlat16_15.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.x = (-u_xlat10_1) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * u_xlat16_7.xxx;\n    u_xlat16_37 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n    u_xlatb0 = u_xlat16_37!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_22 = u_xlat0.x * u_xlat16_22;\n    u_xlat16_8.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    u_xlat16_22 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10.x + -0.5;\n    u_xlat16_37 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_37;\n    u_xlat16_9.xyz = (-u_xlat16_15.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat16_15.xyz;\n    u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_8.xyz;\n    u_xlat16_22 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_22 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_5.x * u_xlat16_12.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_12.x;\n    u_xlat16_2.x = u_xlat16_32 * u_xlat16_2.x;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_15.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat30;\nfloat u_xlat31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_37;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat10.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat16_2.x = dot(u_xlat1.xyz, (-u_xlat10.xyz));\n    u_xlat16_12.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_22 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_12.x = (-u_xlat16_22) + u_xlat16_12.x;\n    u_xlat16_12.x = float(1.0) \/ u_xlat16_12.x;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat16_32 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_22 = (-u_xlat16_22) + u_xlat16_32;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_12.x * -2.0 + 3.0;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_32 = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = (-u_xlat16_22) * u_xlat16_12.x + 1.0;\n    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10.x = (-u_xlat16_4.w) * _GlossMapScale + 1.0;\n    u_xlat20 = (-u_xlat10.x) * u_xlat10.x + 1.0;\n    u_xlat30 = u_xlat10.x * u_xlat10.x;\n    u_xlat31 = u_xlat16_32 * u_xlat20 + u_xlat30;\n    u_xlat20 = abs(u_xlat16_2.x) * u_xlat20 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat31 = u_xlat31 * abs(u_xlat16_2.x);\n    u_xlat16_2.x = -abs(u_xlat16_2.x) + 1.0;\n    u_xlat20 = u_xlat16_32 * u_xlat20 + u_xlat31;\n    u_xlat20 = u_xlat20 + 9.99999975e-06;\n    u_xlat20 = 0.5 \/ u_xlat20;\n    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_22 = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat16_22 * u_xlat30 + (-u_xlat16_22);\n    u_xlat0.x = u_xlat0.x * u_xlat16_22 + 1.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat30 = u_xlat30 * 0.318309873;\n    u_xlat0.x = u_xlat30 \/ u_xlat0.x;\n    u_xlat16_22 = u_xlat0.x * u_xlat20;\n    u_xlat0.x = u_xlat16_22 * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat16_22 = u_xlat16_32 * u_xlat0.x;\n    u_xlat16_15.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xzw = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_1 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_15.xyz = vec3(u_xlat16_1) * u_xlat16_15.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.x = (-u_xlat16_1) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xzw * u_xlat16_7.xxx;\n    u_xlat16_37 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);\n    u_xlatb0 = u_xlat16_37!=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat16_22 = u_xlat0.x * u_xlat16_22;\n    u_xlat16_8.xyz = vec3(u_xlat16_22) * _LightColor0.xyz;\n    u_xlat16_22 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = dot(u_xlat16_5.xx, u_xlat16_5.xx);\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10.x + -0.5;\n    u_xlat16_37 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_37;\n    u_xlat16_9.xyz = (-u_xlat16_15.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_9.xyz * vec3(u_xlat16_22) + u_xlat16_15.xyz;\n    u_xlat16_15.xyz = u_xlat16_15.xyz * u_xlat16_8.xyz;\n    u_xlat16_22 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_22;\n    u_xlat16_2.x = u_xlat16_5.x * u_xlat16_2.x + 1.0;\n    u_xlat16_22 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_22;\n    u_xlat16_12.x = u_xlat16_5.x * u_xlat16_12.x + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_12.x;\n    u_xlat16_2.x = u_xlat16_32 * u_xlat16_2.x;\n    u_xlat16_12.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_12.xyz = _SColor.www * u_xlat16_12.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_12.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + u_xlat16_12.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_15.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat10_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat10_2 = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat10_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat10_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","TCP2_STYLIZED_FRESNEL","_METALLICGLOSSMAP","_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump float _RimStrength;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MetallicGlossMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_22;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nfloat u_xlat30;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9 = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0 = (-u_xlat16_9) + u_xlat16_0;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9 = (-u_xlat16_9) + u_xlat16_18;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_27 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = (-u_xlat16_9) * u_xlat16_0 + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat28 = (-u_xlat16_3.w) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat30 = u_xlat28 * u_xlat28;\n    u_xlat5.x = u_xlat16_27 * u_xlat29 + u_xlat30;\n    u_xlat29 = abs(u_xlat16_9) * u_xlat29 + u_xlat30;\n    u_xlat30 = u_xlat30 * u_xlat30;\n    u_xlat5.x = abs(u_xlat16_9) * u_xlat5.x;\n    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;\n    u_xlat29 = u_xlat16_27 * u_xlat29 + u_xlat5.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat5.x = max(u_xlat5.x, 0.00100000005);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_13 = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat30 + (-u_xlat16_4.x);\n    u_xlat1.x = u_xlat1.x * u_xlat16_4.x + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat30 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat29;\n    u_xlat16_22 = _SpecSmooth * 0.5;\n    u_xlat16_22 = u_xlat16_4.x * 3.14159274 + (-u_xlat16_22);\n    u_xlat1.x = u_xlat16_4.x * 3.14159274;\n    u_xlat16_4.x = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_22 = u_xlat16_4.x * -2.0 + 3.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_22 = float(1.0) \/ u_xlat10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_22 + (-u_xlat1.x);\n    u_xlat16_4.x = _SpecBlend * u_xlat16_4.x + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_4.x, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_4.x = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_3.xyz * _Color.xyz;\n    u_xlat16_2 = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).x;\n    u_xlat16_6.xyz = vec3(u_xlat16_2) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_22 = (-u_xlat16_2) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat16_22 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_22!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xzw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_33 = (-u_xlat16_13) + 1.0;\n    u_xlat16_13 = dot(vec2(u_xlat16_13), vec2(u_xlat16_13));\n    u_xlat16_13 = u_xlat16_13 * u_xlat28 + -0.5;\n    u_xlat16_34 = (-u_xlat28) * u_xlat28 + 1.33000004;\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_6.x;\n    u_xlat16_0 = u_xlat16_13 * u_xlat16_0 + 1.0;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_9 * u_xlat16_6.x;\n    u_xlat16_9 = u_xlat16_9 + (-_RimMin);\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_6.x + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_13;\n    u_xlat16_0 = u_xlat16_27 * u_xlat16_0;\n    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_4.xzw;\n    u_xlat16_0 = (-_RimMin) + _RimMax;\n    u_xlat16_0 = float(1.0) \/ u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_9 = u_xlat16_0 * -2.0 + 3.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_9;\n    u_xlat16_0 = u_xlat16_0 * _RimStrength;\n    u_xlat16_0 = u_xlat16_34 * u_xlat16_0;\n    u_xlat16_0 = u_xlat16_18 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_0) * _LightColor0.xyz + u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","_METALLICGLOSSMAP"],"\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nlowp vec2 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9.x) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = (-u_xlat16_9.x) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat10_3.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat10_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_18 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9.x) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9.x) * u_xlat21;\n    u_xlat16_9.x = -abs(u_xlat16_9.x) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_27 * u_xlat12 + (-u_xlat16_27);\n    u_xlat1.x = u_xlat1.x * u_xlat16_27 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_27 = u_xlat1.x * u_xlat29;\n    u_xlat16_13.x = _SpecSmooth * 0.5;\n    u_xlat16_13.x = u_xlat16_27 * 3.14159274 + (-u_xlat16_13.x);\n    u_xlat1.x = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_13.x = float(1.0) \/ u_xlat10;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x + (-u_xlat1.x);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_27 = u_xlat16_18 * u_xlat1.x;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat10_3.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat10_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat28 + -0.5;\n    u_xlat16_33 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_27) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_27 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_4.x * u_xlat16_9.x + 1.0;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_4.x * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_9.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0,0],[1,0,["DIRECTIONAL","TCP2_DISABLE_WRAPPED_LIGHT","TCP2_SPEC_TOON","_METALLICGLOSSMAP"],"\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmoothAdd;\nuniform \tmediump float _SpecSmooth;\nuniform \tmediump float _SpecBlend;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _MetallicGlossMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0.x = _RampSmoothAdd * 0.5 + _RampThreshold;\n    u_xlat16_9.x = (-_RampSmoothAdd) * 0.5 + _RampThreshold;\n    u_xlat16_0.x = (-u_xlat16_9.x) + u_xlat16_0.x;\n    u_xlat16_0.x = float(1.0) \/ u_xlat16_0.x;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat16_18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_18;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_9.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_18 = u_xlat16_0.x * u_xlat16_9.x;\n    u_xlat16_0.x = (-u_xlat16_9.x) * u_xlat16_0.x + 1.0;\n    u_xlat28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat3.xyz = vec3(u_xlat28) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat28) + u_xlat2.xyz;\n    u_xlat16_9.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat16_3.xy = texture(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat28 = (-u_xlat16_3.y) * _GlossMapScale + 1.0;\n    u_xlat29 = (-u_xlat28) * u_xlat28 + 1.0;\n    u_xlat12 = u_xlat28 * u_xlat28;\n    u_xlat21 = u_xlat16_18 * u_xlat29 + u_xlat12;\n    u_xlat29 = abs(u_xlat16_9.x) * u_xlat29 + u_xlat12;\n    u_xlat12 = u_xlat12 * u_xlat12;\n    u_xlat21 = abs(u_xlat16_9.x) * u_xlat21;\n    u_xlat16_9.x = -abs(u_xlat16_9.x) + 1.0;\n    u_xlat29 = u_xlat16_18 * u_xlat29 + u_xlat21;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 \/ u_xlat29;\n    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat16_4.xyz;\n    u_xlat16_27 = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat1.x = u_xlat16_27 * u_xlat12 + (-u_xlat16_27);\n    u_xlat1.x = u_xlat1.x * u_xlat16_27 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat10 = u_xlat12 * 0.318309873;\n    u_xlat1.x = u_xlat10 \/ u_xlat1.x;\n    u_xlat16_27 = u_xlat1.x * u_xlat29;\n    u_xlat16_13.x = _SpecSmooth * 0.5;\n    u_xlat16_13.x = u_xlat16_27 * 3.14159274 + (-u_xlat16_13.x);\n    u_xlat1.x = u_xlat16_27 * 3.14159274;\n    u_xlat16_27 = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat16_27 * -2.0 + 3.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x;\n    u_xlat10 = abs(u_xlat28) * 0.850000024 + 9.99999975e-05;\n    u_xlat16_13.x = float(1.0) \/ u_xlat10;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_13.x + (-u_xlat1.x);\n    u_xlat16_27 = _SpecBlend * u_xlat16_27 + u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_27, 9.99999975e-05);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat16_27 = u_xlat16_18 * u_xlat1.x;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = (-u_xlat16_3.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;\n    u_xlat16_33 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_33!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat16_27 = u_xlat16_27 * u_xlat1.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * _LightColor0.xyz;\n    u_xlat16_27 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = dot(u_xlat16_4.xx, u_xlat16_4.xx);\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat28 + -0.5;\n    u_xlat16_33 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_33;\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_8.xyz * vec3(u_xlat16_27) + u_xlat16_13.xyz;\n    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;\n    u_xlat16_27 = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_27;\n    u_xlat16_9.x = u_xlat16_4.x * u_xlat16_9.x + 1.0;\n    u_xlat16_27 = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_27;\n    u_xlat16_0.x = u_xlat16_4.x * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_9.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_18 * u_xlat16_0.x;\n    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_13.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",1,0]],[],0],[2,0,"ShadowCaster",8,"",0,[4,null],[1,null],[2,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","SHADOWCASTER"],["PerformanceChecks","False"],["RenderType","Opaque"],["SHADOWSUPPORT","true"]],["INSTANCING_ON","SHADOWS_CUBE","SHADOWS_DEPTH","STEREO_CUBEMAP_RENDER_ON","STEREO_INSTANCING_ON","STEREO_MULTIVIEW_ON","UNITY_SINGLE_PASS_STEREO","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON","_ALPHATEST_ON","_","__"],[[["_","_ALPHATEST_ON","_ALPHABLEND_ON","_ALPHAPREMULTIPLY_ON"],1],[["__","INSTANCING_ON"],1],[["SHADOWS_DEPTH"],0],[["SHADOWS_CUBE"],0]],[],[],0]],[],[["_Color",0,1,1,1,1,"",0],["_MainTex",4,0,0,0,0,"white",0],["_Cutoff",3,0.5,0,1,0,"",0],["_Glossiness",3,0.5,0,1,0,"",0],["_GlossMapScale",3,1,0,1,0,"",0],["_SmoothnessTextureChannel",2,0,0,0,0,"",0],["_Metallic",3,0,0,1,0,"",32],["_MetallicGlossMap",4,0,0,0,0,"white",0],["_SpecularHighlights",2,1,0,0,0,"",0],["_GlossyReflections",2,1,0,0,0,"",0],["_BumpScale",2,1,0,0,0,"",0],["_BumpMap",4,0,0,0,0,"bump",0],["_Parallax",3,0.0199999995529652,0.00499999988824129,0.0799999982118607,0,"",0],["_ParallaxMap",4,0,0,0,0,"black",0],["_OcclusionStrength",3,1,0,1,0,"",0],["_OcclusionMap",4,0,0,0,0,"white",0],["_EmissionColor",0,0,0,0,1,"",0],["_EmissionMap",4,0,0,0,0,"white",0],["_DetailMask",4,0,0,0,0,"white",0],["_DetailAlbedoMap",4,0,0,0,0,"grey",0],["_DetailNormalMapScale",2,1,0,0,0,"",0],["_DetailNormalMap",4,0,0,0,0,"bump",0],["_UVSec",2,0,0,0,0,"",0],["_Mode",2,0,0,0,0,"",1],["_SrcBlend",2,1,0,0,0,"",1],["_DstBlend",2,0,0,0,0,"",1],["_ZWrite",2,1,0,0,0,"",1],["_HColor",0,1,1,1,1,"",0],["_SColor",0,0.25,0.25,0.25,1,"",0],["_TCP2_DISABLE_WRAPPED_LIGHT",2,1,0,0,0,"",0],["_TCP2_RAMPTEXT",2,0,0,0,0,"",0],["_Ramp",4,0,0,0,0,"gray",0],["_RampThreshold",3,0.5,0,1,0,"",0],["_RampSmooth",3,0.200000002980232,0,1,0,"",0],["_RampSmoothAdd",3,0.75,0,1,0,"",0],["_TCP2_SPEC_TOON",2,0,0,0,0,"",0],["_SpecSmooth",3,1,0,1,0,"",0],["_SpecBlend",3,1,0,1,0,"",0],["_TCP2_STYLIZED_FRESNEL",2,0,0,0,0,"",0],["_RimColor",0,0.800000011920929,0.800000011920929,0.800000011920929,0.600000023841858,"",0],["_RimStrength",3,0.5,0,2,0,"",0],["_RimMin",3,0.600000023841858,0,1,0,"",0],["_RimMax",3,0.850000023841858,0,1,0,"",0],["_EnableOutline",2,0,0,0,0,"",1]],0,70,0,0,0]}