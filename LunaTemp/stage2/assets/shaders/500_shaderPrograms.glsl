["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nuniform \tvec4 _LightColor0;\nuniform \tfloat _SpecularInt;\nuniform \tfloat _SpecularPow;\nuniform \tfloat _Alpha;\nuniform lowp sampler2D _SpecularTex;\nuniform lowp sampler2D _PlusTex;\nuniform lowp sampler2D _TexFadePlus;\nuniform lowp sampler2D _BaseTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _SpecularPow;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat10_4.xyz = texture2D(_SpecularTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat4.xyz = u_xlat10_4.xyz * _LightColor0.xyz;\n    u_xlat4.xyz = u_xlat4.xyz * vec3(_SpecularInt);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat10_2.xyz = texture2D(_TexFadePlus, u_xlat1.xy).xyz;\n    u_xlat10_1.xyz = texture2D(_PlusTex, u_xlat1.xy).xyz;\n    u_xlatb12 = _ScaleFadePlus>=u_xlat10_1.x;\n    u_xlat13 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat10_2.xzy;\n    u_xlat1.xyz = u_xlat10_1.xzy * vec3(u_xlat12) + u_xlat2.xyz;\n    u_xlat10_2 = texture2D(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 * _ColorMulti;\n    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzy + u_xlat0.xyz;\n    u_xlat16_3 = u_xlat2.w;\n    u_xlat0.x = u_xlat16_3 * _Alpha;\n    SV_Target0.w = u_xlat0.x;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec3 in_NORMAL0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tfloat _ScaleTexture;\nuniform \tmediump vec4 _ColorMulti;\nuniform \tfloat _ScaleFadePlus;\nuniform \tvec4 _LightColor0;\nuniform \tfloat _SpecularInt;\nuniform \tfloat _SpecularPow;\nuniform \tfloat _Alpha;\nUNITY_LOCATION(0) uniform mediump sampler2D _SpecularTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _PlusTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _TexFadePlus;\nUNITY_LOCATION(3) uniform mediump sampler2D _BaseTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = _WorldSpaceLightPos0.xyz * vec3(u_xlat12) + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat0.x = log2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * _SpecularPow;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat16_4.xyz = texture(_SpecularTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat4.xyz = u_xlat4.xyz * vec3(_SpecularInt);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(_ScaleTexture);\n    u_xlat16_2.xyz = texture(_TexFadePlus, u_xlat1.xy).xyz;\n    u_xlat16_1.xyz = texture(_PlusTex, u_xlat1.xy).xyz;\n    u_xlatb12 = _ScaleFadePlus>=u_xlat16_1.x;\n    u_xlat13 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat16_2.xzy;\n    u_xlat1.xyz = u_xlat16_1.xzy * vec3(u_xlat12) + u_xlat2.xyz;\n    u_xlat16_2 = texture(_BaseTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 * _ColorMulti;\n    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xzy + u_xlat0.xyz;\n    u_xlat16_3 = u_xlat2.w;\n    u_xlat0.x = u_xlat16_3 * _Alpha;\n    SV_Target0.w = u_xlat0.x;\n    return;\n}\n\n"]