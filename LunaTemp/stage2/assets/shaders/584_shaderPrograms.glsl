["\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat16_2 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat0 * vec4(u_xlat16_2);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = unity_roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = texture(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"]